
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  address: string
  username: string
  email: string
  password: string
  myLikedMusics: string[]
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Album
 * 
 */
export type Album = {
  id: number
  artistId: number
  genreId: number
  name: string
  type: AlbumType
  coverCID: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Playlist
 * 
 */
export type Playlist = {
  id: number
  creatorId: number
  name: string
  likes: number
  musics: string[]
  coverCID: string
  description: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Genre
 * 
 */
export type Genre = {
  id: number
  name: string
}

/**
 * Model MonthlyListening
 * 
 */
export type MonthlyListening = {
  id: number
  artistId: number
  date: Date
  listenings: number
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const AlbumType: {
  SINGLE: 'SINGLE',
  EP: 'EP',
  ALBUM: 'ALBUM'
};

export type AlbumType = (typeof AlbumType)[keyof typeof AlbumType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.album`: Exposes CRUD operations for the **Album** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Albums
    * const albums = await prisma.album.findMany()
    * ```
    */
  get album(): Prisma.AlbumDelegate<GlobalReject>;

  /**
   * `prisma.playlist`: Exposes CRUD operations for the **Playlist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Playlists
    * const playlists = await prisma.playlist.findMany()
    * ```
    */
  get playlist(): Prisma.PlaylistDelegate<GlobalReject>;

  /**
   * `prisma.genre`: Exposes CRUD operations for the **Genre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Genres
    * const genres = await prisma.genre.findMany()
    * ```
    */
  get genre(): Prisma.GenreDelegate<GlobalReject>;

  /**
   * `prisma.monthlyListening`: Exposes CRUD operations for the **MonthlyListening** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MonthlyListenings
    * const monthlyListenings = await prisma.monthlyListening.findMany()
    * ```
    */
  get monthlyListening(): Prisma.MonthlyListeningDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.10.1
   * Query Engine version: aead147aa326ccb985dcfed5b065b4fdabd44b19
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Album: 'Album',
    Playlist: 'Playlist',
    Genre: 'Genre',
    MonthlyListening: 'MonthlyListening'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    subscribers: number
    likedArtists: number
    albums: number
    likedAlbums: number
    playlists: number
    likedPlaylists: number
    monthlyListenings: number
  }

  export type UserCountOutputTypeSelect = {
    subscribers?: boolean
    likedArtists?: boolean
    albums?: boolean
    likedAlbums?: boolean
    playlists?: boolean
    likedPlaylists?: boolean
    monthlyListenings?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type AlbumCountOutputType
   */


  export type AlbumCountOutputType = {
    subscribers: number
  }

  export type AlbumCountOutputTypeSelect = {
    subscribers?: boolean
  }

  export type AlbumCountOutputTypeGetPayload<S extends boolean | null | undefined | AlbumCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AlbumCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (AlbumCountOutputTypeArgs)
    ? AlbumCountOutputType 
    : S extends { select: any } & (AlbumCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof AlbumCountOutputType ? AlbumCountOutputType[P] : never
  } 
      : AlbumCountOutputType




  // Custom InputTypes

  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AlbumCountOutputType
     */
    select?: AlbumCountOutputTypeSelect | null
  }



  /**
   * Count Type PlaylistCountOutputType
   */


  export type PlaylistCountOutputType = {
    subscribers: number
  }

  export type PlaylistCountOutputTypeSelect = {
    subscribers?: boolean
  }

  export type PlaylistCountOutputTypeGetPayload<S extends boolean | null | undefined | PlaylistCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PlaylistCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PlaylistCountOutputTypeArgs)
    ? PlaylistCountOutputType 
    : S extends { select: any } & (PlaylistCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PlaylistCountOutputType ? PlaylistCountOutputType[P] : never
  } 
      : PlaylistCountOutputType




  // Custom InputTypes

  /**
   * PlaylistCountOutputType without action
   */
  export type PlaylistCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PlaylistCountOutputType
     */
    select?: PlaylistCountOutputTypeSelect | null
  }



  /**
   * Count Type GenreCountOutputType
   */


  export type GenreCountOutputType = {
    albums: number
  }

  export type GenreCountOutputTypeSelect = {
    albums?: boolean
  }

  export type GenreCountOutputTypeGetPayload<S extends boolean | null | undefined | GenreCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GenreCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (GenreCountOutputTypeArgs)
    ? GenreCountOutputType 
    : S extends { select: any } & (GenreCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof GenreCountOutputType ? GenreCountOutputType[P] : never
  } 
      : GenreCountOutputType




  // Custom InputTypes

  /**
   * GenreCountOutputType without action
   */
  export type GenreCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GenreCountOutputType
     */
    select?: GenreCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    address: string | null
    username: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    address: string | null
    username: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    address: number
    username: number
    email: number
    password: number
    myLikedMusics: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    address?: true
    username?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    address?: true
    username?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    address?: true
    username?: true
    email?: true
    password?: true
    myLikedMusics?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    address: string
    username: string
    email: string
    password: string
    myLikedMusics: string[]
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    address?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    subscribers?: boolean | User$subscribersArgs
    likedArtists?: boolean | User$likedArtistsArgs
    albums?: boolean | User$albumsArgs
    likedAlbums?: boolean | User$likedAlbumsArgs
    playlists?: boolean | User$playlistsArgs
    likedPlaylists?: boolean | User$likedPlaylistsArgs
    monthlyListenings?: boolean | User$monthlyListeningsArgs
    myLikedMusics?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    subscribers?: boolean | User$subscribersArgs
    likedArtists?: boolean | User$likedArtistsArgs
    albums?: boolean | User$albumsArgs
    likedAlbums?: boolean | User$likedAlbumsArgs
    playlists?: boolean | User$playlistsArgs
    likedPlaylists?: boolean | User$likedPlaylistsArgs
    monthlyListenings?: boolean | User$monthlyListeningsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'subscribers' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'likedArtists' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'albums' ? Array < AlbumGetPayload<S['include'][P]>>  :
        P extends 'likedAlbums' ? Array < AlbumGetPayload<S['include'][P]>>  :
        P extends 'playlists' ? Array < PlaylistGetPayload<S['include'][P]>>  :
        P extends 'likedPlaylists' ? Array < PlaylistGetPayload<S['include'][P]>>  :
        P extends 'monthlyListenings' ? Array < MonthlyListeningGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'subscribers' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'likedArtists' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'albums' ? Array < AlbumGetPayload<S['select'][P]>>  :
        P extends 'likedAlbums' ? Array < AlbumGetPayload<S['select'][P]>>  :
        P extends 'playlists' ? Array < PlaylistGetPayload<S['select'][P]>>  :
        P extends 'likedPlaylists' ? Array < PlaylistGetPayload<S['select'][P]>>  :
        P extends 'monthlyListenings' ? Array < MonthlyListeningGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    subscribers<T extends User$subscribersArgs= {}>(args?: Subset<T, User$subscribersArgs>): Prisma.PrismaPromise<Array<UserGetPayload<T>>| Null>;

    likedArtists<T extends User$likedArtistsArgs= {}>(args?: Subset<T, User$likedArtistsArgs>): Prisma.PrismaPromise<Array<UserGetPayload<T>>| Null>;

    albums<T extends User$albumsArgs= {}>(args?: Subset<T, User$albumsArgs>): Prisma.PrismaPromise<Array<AlbumGetPayload<T>>| Null>;

    likedAlbums<T extends User$likedAlbumsArgs= {}>(args?: Subset<T, User$likedAlbumsArgs>): Prisma.PrismaPromise<Array<AlbumGetPayload<T>>| Null>;

    playlists<T extends User$playlistsArgs= {}>(args?: Subset<T, User$playlistsArgs>): Prisma.PrismaPromise<Array<PlaylistGetPayload<T>>| Null>;

    likedPlaylists<T extends User$likedPlaylistsArgs= {}>(args?: Subset<T, User$likedPlaylistsArgs>): Prisma.PrismaPromise<Array<PlaylistGetPayload<T>>| Null>;

    monthlyListenings<T extends User$monthlyListeningsArgs= {}>(args?: Subset<T, User$monthlyListeningsArgs>): Prisma.PrismaPromise<Array<MonthlyListeningGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.subscribers
   */
  export type User$subscribersArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User.likedArtists
   */
  export type User$likedArtistsArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User.albums
   */
  export type User$albumsArgs = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude | null
    where?: AlbumWhereInput
    orderBy?: Enumerable<AlbumOrderByWithRelationInput>
    cursor?: AlbumWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AlbumScalarFieldEnum>
  }


  /**
   * User.likedAlbums
   */
  export type User$likedAlbumsArgs = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude | null
    where?: AlbumWhereInput
    orderBy?: Enumerable<AlbumOrderByWithRelationInput>
    cursor?: AlbumWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AlbumScalarFieldEnum>
  }


  /**
   * User.playlists
   */
  export type User$playlistsArgs = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude | null
    where?: PlaylistWhereInput
    orderBy?: Enumerable<PlaylistOrderByWithRelationInput>
    cursor?: PlaylistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PlaylistScalarFieldEnum>
  }


  /**
   * User.likedPlaylists
   */
  export type User$likedPlaylistsArgs = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude | null
    where?: PlaylistWhereInput
    orderBy?: Enumerable<PlaylistOrderByWithRelationInput>
    cursor?: PlaylistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PlaylistScalarFieldEnum>
  }


  /**
   * User.monthlyListenings
   */
  export type User$monthlyListeningsArgs = {
    /**
     * Select specific fields to fetch from the MonthlyListening
     */
    select?: MonthlyListeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MonthlyListeningInclude | null
    where?: MonthlyListeningWhereInput
    orderBy?: Enumerable<MonthlyListeningOrderByWithRelationInput>
    cursor?: MonthlyListeningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MonthlyListeningScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Album
   */


  export type AggregateAlbum = {
    _count: AlbumCountAggregateOutputType | null
    _avg: AlbumAvgAggregateOutputType | null
    _sum: AlbumSumAggregateOutputType | null
    _min: AlbumMinAggregateOutputType | null
    _max: AlbumMaxAggregateOutputType | null
  }

  export type AlbumAvgAggregateOutputType = {
    id: number | null
    artistId: number | null
    genreId: number | null
  }

  export type AlbumSumAggregateOutputType = {
    id: number | null
    artistId: number | null
    genreId: number | null
  }

  export type AlbumMinAggregateOutputType = {
    id: number | null
    artistId: number | null
    genreId: number | null
    name: string | null
    type: AlbumType | null
    coverCID: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlbumMaxAggregateOutputType = {
    id: number | null
    artistId: number | null
    genreId: number | null
    name: string | null
    type: AlbumType | null
    coverCID: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlbumCountAggregateOutputType = {
    id: number
    artistId: number
    genreId: number
    name: number
    type: number
    coverCID: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AlbumAvgAggregateInputType = {
    id?: true
    artistId?: true
    genreId?: true
  }

  export type AlbumSumAggregateInputType = {
    id?: true
    artistId?: true
    genreId?: true
  }

  export type AlbumMinAggregateInputType = {
    id?: true
    artistId?: true
    genreId?: true
    name?: true
    type?: true
    coverCID?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlbumMaxAggregateInputType = {
    id?: true
    artistId?: true
    genreId?: true
    name?: true
    type?: true
    coverCID?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlbumCountAggregateInputType = {
    id?: true
    artistId?: true
    genreId?: true
    name?: true
    type?: true
    coverCID?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AlbumAggregateArgs = {
    /**
     * Filter which Album to aggregate.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: Enumerable<AlbumOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Albums
    **/
    _count?: true | AlbumCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlbumAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlbumSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlbumMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlbumMaxAggregateInputType
  }

  export type GetAlbumAggregateType<T extends AlbumAggregateArgs> = {
        [P in keyof T & keyof AggregateAlbum]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlbum[P]>
      : GetScalarType<T[P], AggregateAlbum[P]>
  }




  export type AlbumGroupByArgs = {
    where?: AlbumWhereInput
    orderBy?: Enumerable<AlbumOrderByWithAggregationInput>
    by: AlbumScalarFieldEnum[]
    having?: AlbumScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlbumCountAggregateInputType | true
    _avg?: AlbumAvgAggregateInputType
    _sum?: AlbumSumAggregateInputType
    _min?: AlbumMinAggregateInputType
    _max?: AlbumMaxAggregateInputType
  }


  export type AlbumGroupByOutputType = {
    id: number
    artistId: number
    genreId: number
    name: string
    type: AlbumType
    coverCID: string
    createdAt: Date
    updatedAt: Date
    _count: AlbumCountAggregateOutputType | null
    _avg: AlbumAvgAggregateOutputType | null
    _sum: AlbumSumAggregateOutputType | null
    _min: AlbumMinAggregateOutputType | null
    _max: AlbumMaxAggregateOutputType | null
  }

  type GetAlbumGroupByPayload<T extends AlbumGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AlbumGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlbumGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlbumGroupByOutputType[P]>
            : GetScalarType<T[P], AlbumGroupByOutputType[P]>
        }
      >
    >


  export type AlbumSelect = {
    id?: boolean
    artist?: boolean | UserArgs
    subscribers?: boolean | Album$subscribersArgs
    genre?: boolean | GenreArgs
    artistId?: boolean
    genreId?: boolean
    name?: boolean
    type?: boolean
    coverCID?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | AlbumCountOutputTypeArgs
  }


  export type AlbumInclude = {
    artist?: boolean | UserArgs
    subscribers?: boolean | Album$subscribersArgs
    genre?: boolean | GenreArgs
    _count?: boolean | AlbumCountOutputTypeArgs
  }

  export type AlbumGetPayload<S extends boolean | null | undefined | AlbumArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Album :
    S extends undefined ? never :
    S extends { include: any } & (AlbumArgs | AlbumFindManyArgs)
    ? Album  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'artist' ? UserGetPayload<S['include'][P]> :
        P extends 'subscribers' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'genre' ? GenreGetPayload<S['include'][P]> :
        P extends '_count' ? AlbumCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AlbumArgs | AlbumFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'artist' ? UserGetPayload<S['select'][P]> :
        P extends 'subscribers' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'genre' ? GenreGetPayload<S['select'][P]> :
        P extends '_count' ? AlbumCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Album ? Album[P] : never
  } 
      : Album


  type AlbumCountArgs = 
    Omit<AlbumFindManyArgs, 'select' | 'include'> & {
      select?: AlbumCountAggregateInputType | true
    }

  export interface AlbumDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Album that matches the filter.
     * @param {AlbumFindUniqueArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AlbumFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AlbumFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Album'> extends True ? Prisma__AlbumClient<AlbumGetPayload<T>> : Prisma__AlbumClient<AlbumGetPayload<T> | null, null>

    /**
     * Find one Album that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AlbumFindUniqueOrThrowArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AlbumFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AlbumFindUniqueOrThrowArgs>
    ): Prisma__AlbumClient<AlbumGetPayload<T>>

    /**
     * Find the first Album that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindFirstArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AlbumFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AlbumFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Album'> extends True ? Prisma__AlbumClient<AlbumGetPayload<T>> : Prisma__AlbumClient<AlbumGetPayload<T> | null, null>

    /**
     * Find the first Album that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindFirstOrThrowArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AlbumFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AlbumFindFirstOrThrowArgs>
    ): Prisma__AlbumClient<AlbumGetPayload<T>>

    /**
     * Find zero or more Albums that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Albums
     * const albums = await prisma.album.findMany()
     * 
     * // Get first 10 Albums
     * const albums = await prisma.album.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const albumWithIdOnly = await prisma.album.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AlbumFindManyArgs>(
      args?: SelectSubset<T, AlbumFindManyArgs>
    ): Prisma.PrismaPromise<Array<AlbumGetPayload<T>>>

    /**
     * Create a Album.
     * @param {AlbumCreateArgs} args - Arguments to create a Album.
     * @example
     * // Create one Album
     * const Album = await prisma.album.create({
     *   data: {
     *     // ... data to create a Album
     *   }
     * })
     * 
    **/
    create<T extends AlbumCreateArgs>(
      args: SelectSubset<T, AlbumCreateArgs>
    ): Prisma__AlbumClient<AlbumGetPayload<T>>

    /**
     * Create many Albums.
     *     @param {AlbumCreateManyArgs} args - Arguments to create many Albums.
     *     @example
     *     // Create many Albums
     *     const album = await prisma.album.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AlbumCreateManyArgs>(
      args?: SelectSubset<T, AlbumCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Album.
     * @param {AlbumDeleteArgs} args - Arguments to delete one Album.
     * @example
     * // Delete one Album
     * const Album = await prisma.album.delete({
     *   where: {
     *     // ... filter to delete one Album
     *   }
     * })
     * 
    **/
    delete<T extends AlbumDeleteArgs>(
      args: SelectSubset<T, AlbumDeleteArgs>
    ): Prisma__AlbumClient<AlbumGetPayload<T>>

    /**
     * Update one Album.
     * @param {AlbumUpdateArgs} args - Arguments to update one Album.
     * @example
     * // Update one Album
     * const album = await prisma.album.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AlbumUpdateArgs>(
      args: SelectSubset<T, AlbumUpdateArgs>
    ): Prisma__AlbumClient<AlbumGetPayload<T>>

    /**
     * Delete zero or more Albums.
     * @param {AlbumDeleteManyArgs} args - Arguments to filter Albums to delete.
     * @example
     * // Delete a few Albums
     * const { count } = await prisma.album.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AlbumDeleteManyArgs>(
      args?: SelectSubset<T, AlbumDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Albums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Albums
     * const album = await prisma.album.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AlbumUpdateManyArgs>(
      args: SelectSubset<T, AlbumUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Album.
     * @param {AlbumUpsertArgs} args - Arguments to update or create a Album.
     * @example
     * // Update or create a Album
     * const album = await prisma.album.upsert({
     *   create: {
     *     // ... data to create a Album
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Album we want to update
     *   }
     * })
    **/
    upsert<T extends AlbumUpsertArgs>(
      args: SelectSubset<T, AlbumUpsertArgs>
    ): Prisma__AlbumClient<AlbumGetPayload<T>>

    /**
     * Count the number of Albums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumCountArgs} args - Arguments to filter Albums to count.
     * @example
     * // Count the number of Albums
     * const count = await prisma.album.count({
     *   where: {
     *     // ... the filter for the Albums we want to count
     *   }
     * })
    **/
    count<T extends AlbumCountArgs>(
      args?: Subset<T, AlbumCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlbumCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Album.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlbumAggregateArgs>(args: Subset<T, AlbumAggregateArgs>): Prisma.PrismaPromise<GetAlbumAggregateType<T>>

    /**
     * Group by Album.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlbumGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlbumGroupByArgs['orderBy'] }
        : { orderBy?: AlbumGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlbumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlbumGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Album.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AlbumClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    artist<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    subscribers<T extends Album$subscribersArgs= {}>(args?: Subset<T, Album$subscribersArgs>): Prisma.PrismaPromise<Array<UserGetPayload<T>>| Null>;

    genre<T extends GenreArgs= {}>(args?: Subset<T, GenreArgs>): Prisma__GenreClient<GenreGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Album base type for findUnique actions
   */
  export type AlbumFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude | null
    /**
     * Filter, which Album to fetch.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album findUnique
   */
  export interface AlbumFindUniqueArgs extends AlbumFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Album findUniqueOrThrow
   */
  export type AlbumFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude | null
    /**
     * Filter, which Album to fetch.
     */
    where: AlbumWhereUniqueInput
  }


  /**
   * Album base type for findFirst actions
   */
  export type AlbumFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude | null
    /**
     * Filter, which Album to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: Enumerable<AlbumOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Albums.
     */
    distinct?: Enumerable<AlbumScalarFieldEnum>
  }

  /**
   * Album findFirst
   */
  export interface AlbumFindFirstArgs extends AlbumFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Album findFirstOrThrow
   */
  export type AlbumFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude | null
    /**
     * Filter, which Album to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: Enumerable<AlbumOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Albums.
     */
    distinct?: Enumerable<AlbumScalarFieldEnum>
  }


  /**
   * Album findMany
   */
  export type AlbumFindManyArgs = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude | null
    /**
     * Filter, which Albums to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: Enumerable<AlbumOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    distinct?: Enumerable<AlbumScalarFieldEnum>
  }


  /**
   * Album create
   */
  export type AlbumCreateArgs = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude | null
    /**
     * The data needed to create a Album.
     */
    data: XOR<AlbumCreateInput, AlbumUncheckedCreateInput>
  }


  /**
   * Album createMany
   */
  export type AlbumCreateManyArgs = {
    /**
     * The data used to create many Albums.
     */
    data: Enumerable<AlbumCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Album update
   */
  export type AlbumUpdateArgs = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude | null
    /**
     * The data needed to update a Album.
     */
    data: XOR<AlbumUpdateInput, AlbumUncheckedUpdateInput>
    /**
     * Choose, which Album to update.
     */
    where: AlbumWhereUniqueInput
  }


  /**
   * Album updateMany
   */
  export type AlbumUpdateManyArgs = {
    /**
     * The data used to update Albums.
     */
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyInput>
    /**
     * Filter which Albums to update
     */
    where?: AlbumWhereInput
  }


  /**
   * Album upsert
   */
  export type AlbumUpsertArgs = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude | null
    /**
     * The filter to search for the Album to update in case it exists.
     */
    where: AlbumWhereUniqueInput
    /**
     * In case the Album found by the `where` argument doesn't exist, create a new Album with this data.
     */
    create: XOR<AlbumCreateInput, AlbumUncheckedCreateInput>
    /**
     * In case the Album was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlbumUpdateInput, AlbumUncheckedUpdateInput>
  }


  /**
   * Album delete
   */
  export type AlbumDeleteArgs = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude | null
    /**
     * Filter which Album to delete.
     */
    where: AlbumWhereUniqueInput
  }


  /**
   * Album deleteMany
   */
  export type AlbumDeleteManyArgs = {
    /**
     * Filter which Albums to delete
     */
    where?: AlbumWhereInput
  }


  /**
   * Album.subscribers
   */
  export type Album$subscribersArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * Album without action
   */
  export type AlbumArgs = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude | null
  }



  /**
   * Model Playlist
   */


  export type AggregatePlaylist = {
    _count: PlaylistCountAggregateOutputType | null
    _avg: PlaylistAvgAggregateOutputType | null
    _sum: PlaylistSumAggregateOutputType | null
    _min: PlaylistMinAggregateOutputType | null
    _max: PlaylistMaxAggregateOutputType | null
  }

  export type PlaylistAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
    likes: number | null
  }

  export type PlaylistSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
    likes: number | null
  }

  export type PlaylistMinAggregateOutputType = {
    id: number | null
    creatorId: number | null
    name: string | null
    likes: number | null
    coverCID: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlaylistMaxAggregateOutputType = {
    id: number | null
    creatorId: number | null
    name: string | null
    likes: number | null
    coverCID: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlaylistCountAggregateOutputType = {
    id: number
    creatorId: number
    name: number
    likes: number
    musics: number
    coverCID: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PlaylistAvgAggregateInputType = {
    id?: true
    creatorId?: true
    likes?: true
  }

  export type PlaylistSumAggregateInputType = {
    id?: true
    creatorId?: true
    likes?: true
  }

  export type PlaylistMinAggregateInputType = {
    id?: true
    creatorId?: true
    name?: true
    likes?: true
    coverCID?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlaylistMaxAggregateInputType = {
    id?: true
    creatorId?: true
    name?: true
    likes?: true
    coverCID?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlaylistCountAggregateInputType = {
    id?: true
    creatorId?: true
    name?: true
    likes?: true
    musics?: true
    coverCID?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlaylistAggregateArgs = {
    /**
     * Filter which Playlist to aggregate.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: Enumerable<PlaylistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Playlists
    **/
    _count?: true | PlaylistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlaylistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlaylistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlaylistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlaylistMaxAggregateInputType
  }

  export type GetPlaylistAggregateType<T extends PlaylistAggregateArgs> = {
        [P in keyof T & keyof AggregatePlaylist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlaylist[P]>
      : GetScalarType<T[P], AggregatePlaylist[P]>
  }




  export type PlaylistGroupByArgs = {
    where?: PlaylistWhereInput
    orderBy?: Enumerable<PlaylistOrderByWithAggregationInput>
    by: PlaylistScalarFieldEnum[]
    having?: PlaylistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlaylistCountAggregateInputType | true
    _avg?: PlaylistAvgAggregateInputType
    _sum?: PlaylistSumAggregateInputType
    _min?: PlaylistMinAggregateInputType
    _max?: PlaylistMaxAggregateInputType
  }


  export type PlaylistGroupByOutputType = {
    id: number
    creatorId: number
    name: string
    likes: number
    musics: string[]
    coverCID: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: PlaylistCountAggregateOutputType | null
    _avg: PlaylistAvgAggregateOutputType | null
    _sum: PlaylistSumAggregateOutputType | null
    _min: PlaylistMinAggregateOutputType | null
    _max: PlaylistMaxAggregateOutputType | null
  }

  type GetPlaylistGroupByPayload<T extends PlaylistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PlaylistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlaylistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlaylistGroupByOutputType[P]>
            : GetScalarType<T[P], PlaylistGroupByOutputType[P]>
        }
      >
    >


  export type PlaylistSelect = {
    id?: boolean
    creator?: boolean | UserArgs
    subscribers?: boolean | Playlist$subscribersArgs
    creatorId?: boolean
    name?: boolean
    likes?: boolean
    musics?: boolean
    coverCID?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | PlaylistCountOutputTypeArgs
  }


  export type PlaylistInclude = {
    creator?: boolean | UserArgs
    subscribers?: boolean | Playlist$subscribersArgs
    _count?: boolean | PlaylistCountOutputTypeArgs
  }

  export type PlaylistGetPayload<S extends boolean | null | undefined | PlaylistArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Playlist :
    S extends undefined ? never :
    S extends { include: any } & (PlaylistArgs | PlaylistFindManyArgs)
    ? Playlist  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'creator' ? UserGetPayload<S['include'][P]> :
        P extends 'subscribers' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends '_count' ? PlaylistCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PlaylistArgs | PlaylistFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'creator' ? UserGetPayload<S['select'][P]> :
        P extends 'subscribers' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends '_count' ? PlaylistCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Playlist ? Playlist[P] : never
  } 
      : Playlist


  type PlaylistCountArgs = 
    Omit<PlaylistFindManyArgs, 'select' | 'include'> & {
      select?: PlaylistCountAggregateInputType | true
    }

  export interface PlaylistDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Playlist that matches the filter.
     * @param {PlaylistFindUniqueArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlaylistFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PlaylistFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Playlist'> extends True ? Prisma__PlaylistClient<PlaylistGetPayload<T>> : Prisma__PlaylistClient<PlaylistGetPayload<T> | null, null>

    /**
     * Find one Playlist that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlaylistFindUniqueOrThrowArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlaylistFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PlaylistFindUniqueOrThrowArgs>
    ): Prisma__PlaylistClient<PlaylistGetPayload<T>>

    /**
     * Find the first Playlist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistFindFirstArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlaylistFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PlaylistFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Playlist'> extends True ? Prisma__PlaylistClient<PlaylistGetPayload<T>> : Prisma__PlaylistClient<PlaylistGetPayload<T> | null, null>

    /**
     * Find the first Playlist that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistFindFirstOrThrowArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlaylistFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PlaylistFindFirstOrThrowArgs>
    ): Prisma__PlaylistClient<PlaylistGetPayload<T>>

    /**
     * Find zero or more Playlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Playlists
     * const playlists = await prisma.playlist.findMany()
     * 
     * // Get first 10 Playlists
     * const playlists = await prisma.playlist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playlistWithIdOnly = await prisma.playlist.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlaylistFindManyArgs>(
      args?: SelectSubset<T, PlaylistFindManyArgs>
    ): Prisma.PrismaPromise<Array<PlaylistGetPayload<T>>>

    /**
     * Create a Playlist.
     * @param {PlaylistCreateArgs} args - Arguments to create a Playlist.
     * @example
     * // Create one Playlist
     * const Playlist = await prisma.playlist.create({
     *   data: {
     *     // ... data to create a Playlist
     *   }
     * })
     * 
    **/
    create<T extends PlaylistCreateArgs>(
      args: SelectSubset<T, PlaylistCreateArgs>
    ): Prisma__PlaylistClient<PlaylistGetPayload<T>>

    /**
     * Create many Playlists.
     *     @param {PlaylistCreateManyArgs} args - Arguments to create many Playlists.
     *     @example
     *     // Create many Playlists
     *     const playlist = await prisma.playlist.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PlaylistCreateManyArgs>(
      args?: SelectSubset<T, PlaylistCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Playlist.
     * @param {PlaylistDeleteArgs} args - Arguments to delete one Playlist.
     * @example
     * // Delete one Playlist
     * const Playlist = await prisma.playlist.delete({
     *   where: {
     *     // ... filter to delete one Playlist
     *   }
     * })
     * 
    **/
    delete<T extends PlaylistDeleteArgs>(
      args: SelectSubset<T, PlaylistDeleteArgs>
    ): Prisma__PlaylistClient<PlaylistGetPayload<T>>

    /**
     * Update one Playlist.
     * @param {PlaylistUpdateArgs} args - Arguments to update one Playlist.
     * @example
     * // Update one Playlist
     * const playlist = await prisma.playlist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlaylistUpdateArgs>(
      args: SelectSubset<T, PlaylistUpdateArgs>
    ): Prisma__PlaylistClient<PlaylistGetPayload<T>>

    /**
     * Delete zero or more Playlists.
     * @param {PlaylistDeleteManyArgs} args - Arguments to filter Playlists to delete.
     * @example
     * // Delete a few Playlists
     * const { count } = await prisma.playlist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlaylistDeleteManyArgs>(
      args?: SelectSubset<T, PlaylistDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Playlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Playlists
     * const playlist = await prisma.playlist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlaylistUpdateManyArgs>(
      args: SelectSubset<T, PlaylistUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Playlist.
     * @param {PlaylistUpsertArgs} args - Arguments to update or create a Playlist.
     * @example
     * // Update or create a Playlist
     * const playlist = await prisma.playlist.upsert({
     *   create: {
     *     // ... data to create a Playlist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Playlist we want to update
     *   }
     * })
    **/
    upsert<T extends PlaylistUpsertArgs>(
      args: SelectSubset<T, PlaylistUpsertArgs>
    ): Prisma__PlaylistClient<PlaylistGetPayload<T>>

    /**
     * Count the number of Playlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistCountArgs} args - Arguments to filter Playlists to count.
     * @example
     * // Count the number of Playlists
     * const count = await prisma.playlist.count({
     *   where: {
     *     // ... the filter for the Playlists we want to count
     *   }
     * })
    **/
    count<T extends PlaylistCountArgs>(
      args?: Subset<T, PlaylistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlaylistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Playlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlaylistAggregateArgs>(args: Subset<T, PlaylistAggregateArgs>): Prisma.PrismaPromise<GetPlaylistAggregateType<T>>

    /**
     * Group by Playlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlaylistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlaylistGroupByArgs['orderBy'] }
        : { orderBy?: PlaylistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlaylistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaylistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Playlist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PlaylistClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    creator<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    subscribers<T extends Playlist$subscribersArgs= {}>(args?: Subset<T, Playlist$subscribersArgs>): Prisma.PrismaPromise<Array<UserGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Playlist base type for findUnique actions
   */
  export type PlaylistFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude | null
    /**
     * Filter, which Playlist to fetch.
     */
    where: PlaylistWhereUniqueInput
  }

  /**
   * Playlist findUnique
   */
  export interface PlaylistFindUniqueArgs extends PlaylistFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Playlist findUniqueOrThrow
   */
  export type PlaylistFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude | null
    /**
     * Filter, which Playlist to fetch.
     */
    where: PlaylistWhereUniqueInput
  }


  /**
   * Playlist base type for findFirst actions
   */
  export type PlaylistFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude | null
    /**
     * Filter, which Playlist to fetch.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: Enumerable<PlaylistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Playlists.
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Playlists.
     */
    distinct?: Enumerable<PlaylistScalarFieldEnum>
  }

  /**
   * Playlist findFirst
   */
  export interface PlaylistFindFirstArgs extends PlaylistFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Playlist findFirstOrThrow
   */
  export type PlaylistFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude | null
    /**
     * Filter, which Playlist to fetch.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: Enumerable<PlaylistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Playlists.
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Playlists.
     */
    distinct?: Enumerable<PlaylistScalarFieldEnum>
  }


  /**
   * Playlist findMany
   */
  export type PlaylistFindManyArgs = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude | null
    /**
     * Filter, which Playlists to fetch.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: Enumerable<PlaylistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Playlists.
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    distinct?: Enumerable<PlaylistScalarFieldEnum>
  }


  /**
   * Playlist create
   */
  export type PlaylistCreateArgs = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude | null
    /**
     * The data needed to create a Playlist.
     */
    data: XOR<PlaylistCreateInput, PlaylistUncheckedCreateInput>
  }


  /**
   * Playlist createMany
   */
  export type PlaylistCreateManyArgs = {
    /**
     * The data used to create many Playlists.
     */
    data: Enumerable<PlaylistCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Playlist update
   */
  export type PlaylistUpdateArgs = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude | null
    /**
     * The data needed to update a Playlist.
     */
    data: XOR<PlaylistUpdateInput, PlaylistUncheckedUpdateInput>
    /**
     * Choose, which Playlist to update.
     */
    where: PlaylistWhereUniqueInput
  }


  /**
   * Playlist updateMany
   */
  export type PlaylistUpdateManyArgs = {
    /**
     * The data used to update Playlists.
     */
    data: XOR<PlaylistUpdateManyMutationInput, PlaylistUncheckedUpdateManyInput>
    /**
     * Filter which Playlists to update
     */
    where?: PlaylistWhereInput
  }


  /**
   * Playlist upsert
   */
  export type PlaylistUpsertArgs = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude | null
    /**
     * The filter to search for the Playlist to update in case it exists.
     */
    where: PlaylistWhereUniqueInput
    /**
     * In case the Playlist found by the `where` argument doesn't exist, create a new Playlist with this data.
     */
    create: XOR<PlaylistCreateInput, PlaylistUncheckedCreateInput>
    /**
     * In case the Playlist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlaylistUpdateInput, PlaylistUncheckedUpdateInput>
  }


  /**
   * Playlist delete
   */
  export type PlaylistDeleteArgs = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude | null
    /**
     * Filter which Playlist to delete.
     */
    where: PlaylistWhereUniqueInput
  }


  /**
   * Playlist deleteMany
   */
  export type PlaylistDeleteManyArgs = {
    /**
     * Filter which Playlists to delete
     */
    where?: PlaylistWhereInput
  }


  /**
   * Playlist.subscribers
   */
  export type Playlist$subscribersArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * Playlist without action
   */
  export type PlaylistArgs = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude | null
  }



  /**
   * Model Genre
   */


  export type AggregateGenre = {
    _count: GenreCountAggregateOutputType | null
    _avg: GenreAvgAggregateOutputType | null
    _sum: GenreSumAggregateOutputType | null
    _min: GenreMinAggregateOutputType | null
    _max: GenreMaxAggregateOutputType | null
  }

  export type GenreAvgAggregateOutputType = {
    id: number | null
  }

  export type GenreSumAggregateOutputType = {
    id: number | null
  }

  export type GenreMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type GenreMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type GenreCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type GenreAvgAggregateInputType = {
    id?: true
  }

  export type GenreSumAggregateInputType = {
    id?: true
  }

  export type GenreMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type GenreMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type GenreCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type GenreAggregateArgs = {
    /**
     * Filter which Genre to aggregate.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: Enumerable<GenreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Genres
    **/
    _count?: true | GenreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GenreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GenreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GenreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GenreMaxAggregateInputType
  }

  export type GetGenreAggregateType<T extends GenreAggregateArgs> = {
        [P in keyof T & keyof AggregateGenre]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGenre[P]>
      : GetScalarType<T[P], AggregateGenre[P]>
  }




  export type GenreGroupByArgs = {
    where?: GenreWhereInput
    orderBy?: Enumerable<GenreOrderByWithAggregationInput>
    by: GenreScalarFieldEnum[]
    having?: GenreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GenreCountAggregateInputType | true
    _avg?: GenreAvgAggregateInputType
    _sum?: GenreSumAggregateInputType
    _min?: GenreMinAggregateInputType
    _max?: GenreMaxAggregateInputType
  }


  export type GenreGroupByOutputType = {
    id: number
    name: string
    _count: GenreCountAggregateOutputType | null
    _avg: GenreAvgAggregateOutputType | null
    _sum: GenreSumAggregateOutputType | null
    _min: GenreMinAggregateOutputType | null
    _max: GenreMaxAggregateOutputType | null
  }

  type GetGenreGroupByPayload<T extends GenreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GenreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GenreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GenreGroupByOutputType[P]>
            : GetScalarType<T[P], GenreGroupByOutputType[P]>
        }
      >
    >


  export type GenreSelect = {
    id?: boolean
    name?: boolean
    albums?: boolean | Genre$albumsArgs
    _count?: boolean | GenreCountOutputTypeArgs
  }


  export type GenreInclude = {
    albums?: boolean | Genre$albumsArgs
    _count?: boolean | GenreCountOutputTypeArgs
  }

  export type GenreGetPayload<S extends boolean | null | undefined | GenreArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Genre :
    S extends undefined ? never :
    S extends { include: any } & (GenreArgs | GenreFindManyArgs)
    ? Genre  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'albums' ? Array < AlbumGetPayload<S['include'][P]>>  :
        P extends '_count' ? GenreCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (GenreArgs | GenreFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'albums' ? Array < AlbumGetPayload<S['select'][P]>>  :
        P extends '_count' ? GenreCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Genre ? Genre[P] : never
  } 
      : Genre


  type GenreCountArgs = 
    Omit<GenreFindManyArgs, 'select' | 'include'> & {
      select?: GenreCountAggregateInputType | true
    }

  export interface GenreDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Genre that matches the filter.
     * @param {GenreFindUniqueArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GenreFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GenreFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Genre'> extends True ? Prisma__GenreClient<GenreGetPayload<T>> : Prisma__GenreClient<GenreGetPayload<T> | null, null>

    /**
     * Find one Genre that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GenreFindUniqueOrThrowArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GenreFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GenreFindUniqueOrThrowArgs>
    ): Prisma__GenreClient<GenreGetPayload<T>>

    /**
     * Find the first Genre that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindFirstArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GenreFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GenreFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Genre'> extends True ? Prisma__GenreClient<GenreGetPayload<T>> : Prisma__GenreClient<GenreGetPayload<T> | null, null>

    /**
     * Find the first Genre that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindFirstOrThrowArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GenreFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GenreFindFirstOrThrowArgs>
    ): Prisma__GenreClient<GenreGetPayload<T>>

    /**
     * Find zero or more Genres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Genres
     * const genres = await prisma.genre.findMany()
     * 
     * // Get first 10 Genres
     * const genres = await prisma.genre.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const genreWithIdOnly = await prisma.genre.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GenreFindManyArgs>(
      args?: SelectSubset<T, GenreFindManyArgs>
    ): Prisma.PrismaPromise<Array<GenreGetPayload<T>>>

    /**
     * Create a Genre.
     * @param {GenreCreateArgs} args - Arguments to create a Genre.
     * @example
     * // Create one Genre
     * const Genre = await prisma.genre.create({
     *   data: {
     *     // ... data to create a Genre
     *   }
     * })
     * 
    **/
    create<T extends GenreCreateArgs>(
      args: SelectSubset<T, GenreCreateArgs>
    ): Prisma__GenreClient<GenreGetPayload<T>>

    /**
     * Create many Genres.
     *     @param {GenreCreateManyArgs} args - Arguments to create many Genres.
     *     @example
     *     // Create many Genres
     *     const genre = await prisma.genre.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GenreCreateManyArgs>(
      args?: SelectSubset<T, GenreCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Genre.
     * @param {GenreDeleteArgs} args - Arguments to delete one Genre.
     * @example
     * // Delete one Genre
     * const Genre = await prisma.genre.delete({
     *   where: {
     *     // ... filter to delete one Genre
     *   }
     * })
     * 
    **/
    delete<T extends GenreDeleteArgs>(
      args: SelectSubset<T, GenreDeleteArgs>
    ): Prisma__GenreClient<GenreGetPayload<T>>

    /**
     * Update one Genre.
     * @param {GenreUpdateArgs} args - Arguments to update one Genre.
     * @example
     * // Update one Genre
     * const genre = await prisma.genre.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GenreUpdateArgs>(
      args: SelectSubset<T, GenreUpdateArgs>
    ): Prisma__GenreClient<GenreGetPayload<T>>

    /**
     * Delete zero or more Genres.
     * @param {GenreDeleteManyArgs} args - Arguments to filter Genres to delete.
     * @example
     * // Delete a few Genres
     * const { count } = await prisma.genre.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GenreDeleteManyArgs>(
      args?: SelectSubset<T, GenreDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Genres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Genres
     * const genre = await prisma.genre.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GenreUpdateManyArgs>(
      args: SelectSubset<T, GenreUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Genre.
     * @param {GenreUpsertArgs} args - Arguments to update or create a Genre.
     * @example
     * // Update or create a Genre
     * const genre = await prisma.genre.upsert({
     *   create: {
     *     // ... data to create a Genre
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Genre we want to update
     *   }
     * })
    **/
    upsert<T extends GenreUpsertArgs>(
      args: SelectSubset<T, GenreUpsertArgs>
    ): Prisma__GenreClient<GenreGetPayload<T>>

    /**
     * Count the number of Genres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreCountArgs} args - Arguments to filter Genres to count.
     * @example
     * // Count the number of Genres
     * const count = await prisma.genre.count({
     *   where: {
     *     // ... the filter for the Genres we want to count
     *   }
     * })
    **/
    count<T extends GenreCountArgs>(
      args?: Subset<T, GenreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GenreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Genre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GenreAggregateArgs>(args: Subset<T, GenreAggregateArgs>): Prisma.PrismaPromise<GetGenreAggregateType<T>>

    /**
     * Group by Genre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GenreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GenreGroupByArgs['orderBy'] }
        : { orderBy?: GenreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GenreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGenreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Genre.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GenreClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    albums<T extends Genre$albumsArgs= {}>(args?: Subset<T, Genre$albumsArgs>): Prisma.PrismaPromise<Array<AlbumGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Genre base type for findUnique actions
   */
  export type GenreFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
    /**
     * Filter, which Genre to fetch.
     */
    where: GenreWhereUniqueInput
  }

  /**
   * Genre findUnique
   */
  export interface GenreFindUniqueArgs extends GenreFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Genre findUniqueOrThrow
   */
  export type GenreFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
    /**
     * Filter, which Genre to fetch.
     */
    where: GenreWhereUniqueInput
  }


  /**
   * Genre base type for findFirst actions
   */
  export type GenreFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
    /**
     * Filter, which Genre to fetch.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: Enumerable<GenreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genres.
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genres.
     */
    distinct?: Enumerable<GenreScalarFieldEnum>
  }

  /**
   * Genre findFirst
   */
  export interface GenreFindFirstArgs extends GenreFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Genre findFirstOrThrow
   */
  export type GenreFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
    /**
     * Filter, which Genre to fetch.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: Enumerable<GenreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genres.
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genres.
     */
    distinct?: Enumerable<GenreScalarFieldEnum>
  }


  /**
   * Genre findMany
   */
  export type GenreFindManyArgs = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
    /**
     * Filter, which Genres to fetch.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: Enumerable<GenreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Genres.
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    distinct?: Enumerable<GenreScalarFieldEnum>
  }


  /**
   * Genre create
   */
  export type GenreCreateArgs = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
    /**
     * The data needed to create a Genre.
     */
    data: XOR<GenreCreateInput, GenreUncheckedCreateInput>
  }


  /**
   * Genre createMany
   */
  export type GenreCreateManyArgs = {
    /**
     * The data used to create many Genres.
     */
    data: Enumerable<GenreCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Genre update
   */
  export type GenreUpdateArgs = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
    /**
     * The data needed to update a Genre.
     */
    data: XOR<GenreUpdateInput, GenreUncheckedUpdateInput>
    /**
     * Choose, which Genre to update.
     */
    where: GenreWhereUniqueInput
  }


  /**
   * Genre updateMany
   */
  export type GenreUpdateManyArgs = {
    /**
     * The data used to update Genres.
     */
    data: XOR<GenreUpdateManyMutationInput, GenreUncheckedUpdateManyInput>
    /**
     * Filter which Genres to update
     */
    where?: GenreWhereInput
  }


  /**
   * Genre upsert
   */
  export type GenreUpsertArgs = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
    /**
     * The filter to search for the Genre to update in case it exists.
     */
    where: GenreWhereUniqueInput
    /**
     * In case the Genre found by the `where` argument doesn't exist, create a new Genre with this data.
     */
    create: XOR<GenreCreateInput, GenreUncheckedCreateInput>
    /**
     * In case the Genre was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GenreUpdateInput, GenreUncheckedUpdateInput>
  }


  /**
   * Genre delete
   */
  export type GenreDeleteArgs = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
    /**
     * Filter which Genre to delete.
     */
    where: GenreWhereUniqueInput
  }


  /**
   * Genre deleteMany
   */
  export type GenreDeleteManyArgs = {
    /**
     * Filter which Genres to delete
     */
    where?: GenreWhereInput
  }


  /**
   * Genre.albums
   */
  export type Genre$albumsArgs = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude | null
    where?: AlbumWhereInput
    orderBy?: Enumerable<AlbumOrderByWithRelationInput>
    cursor?: AlbumWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AlbumScalarFieldEnum>
  }


  /**
   * Genre without action
   */
  export type GenreArgs = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
  }



  /**
   * Model MonthlyListening
   */


  export type AggregateMonthlyListening = {
    _count: MonthlyListeningCountAggregateOutputType | null
    _avg: MonthlyListeningAvgAggregateOutputType | null
    _sum: MonthlyListeningSumAggregateOutputType | null
    _min: MonthlyListeningMinAggregateOutputType | null
    _max: MonthlyListeningMaxAggregateOutputType | null
  }

  export type MonthlyListeningAvgAggregateOutputType = {
    id: number | null
    artistId: number | null
    listenings: number | null
  }

  export type MonthlyListeningSumAggregateOutputType = {
    id: number | null
    artistId: number | null
    listenings: number | null
  }

  export type MonthlyListeningMinAggregateOutputType = {
    id: number | null
    artistId: number | null
    date: Date | null
    listenings: number | null
  }

  export type MonthlyListeningMaxAggregateOutputType = {
    id: number | null
    artistId: number | null
    date: Date | null
    listenings: number | null
  }

  export type MonthlyListeningCountAggregateOutputType = {
    id: number
    artistId: number
    date: number
    listenings: number
    _all: number
  }


  export type MonthlyListeningAvgAggregateInputType = {
    id?: true
    artistId?: true
    listenings?: true
  }

  export type MonthlyListeningSumAggregateInputType = {
    id?: true
    artistId?: true
    listenings?: true
  }

  export type MonthlyListeningMinAggregateInputType = {
    id?: true
    artistId?: true
    date?: true
    listenings?: true
  }

  export type MonthlyListeningMaxAggregateInputType = {
    id?: true
    artistId?: true
    date?: true
    listenings?: true
  }

  export type MonthlyListeningCountAggregateInputType = {
    id?: true
    artistId?: true
    date?: true
    listenings?: true
    _all?: true
  }

  export type MonthlyListeningAggregateArgs = {
    /**
     * Filter which MonthlyListening to aggregate.
     */
    where?: MonthlyListeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonthlyListenings to fetch.
     */
    orderBy?: Enumerable<MonthlyListeningOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MonthlyListeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonthlyListenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonthlyListenings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MonthlyListenings
    **/
    _count?: true | MonthlyListeningCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MonthlyListeningAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MonthlyListeningSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MonthlyListeningMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MonthlyListeningMaxAggregateInputType
  }

  export type GetMonthlyListeningAggregateType<T extends MonthlyListeningAggregateArgs> = {
        [P in keyof T & keyof AggregateMonthlyListening]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMonthlyListening[P]>
      : GetScalarType<T[P], AggregateMonthlyListening[P]>
  }




  export type MonthlyListeningGroupByArgs = {
    where?: MonthlyListeningWhereInput
    orderBy?: Enumerable<MonthlyListeningOrderByWithAggregationInput>
    by: MonthlyListeningScalarFieldEnum[]
    having?: MonthlyListeningScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MonthlyListeningCountAggregateInputType | true
    _avg?: MonthlyListeningAvgAggregateInputType
    _sum?: MonthlyListeningSumAggregateInputType
    _min?: MonthlyListeningMinAggregateInputType
    _max?: MonthlyListeningMaxAggregateInputType
  }


  export type MonthlyListeningGroupByOutputType = {
    id: number
    artistId: number
    date: Date
    listenings: number
    _count: MonthlyListeningCountAggregateOutputType | null
    _avg: MonthlyListeningAvgAggregateOutputType | null
    _sum: MonthlyListeningSumAggregateOutputType | null
    _min: MonthlyListeningMinAggregateOutputType | null
    _max: MonthlyListeningMaxAggregateOutputType | null
  }

  type GetMonthlyListeningGroupByPayload<T extends MonthlyListeningGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MonthlyListeningGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MonthlyListeningGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MonthlyListeningGroupByOutputType[P]>
            : GetScalarType<T[P], MonthlyListeningGroupByOutputType[P]>
        }
      >
    >


  export type MonthlyListeningSelect = {
    id?: boolean
    artist?: boolean | UserArgs
    artistId?: boolean
    date?: boolean
    listenings?: boolean
  }


  export type MonthlyListeningInclude = {
    artist?: boolean | UserArgs
  }

  export type MonthlyListeningGetPayload<S extends boolean | null | undefined | MonthlyListeningArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MonthlyListening :
    S extends undefined ? never :
    S extends { include: any } & (MonthlyListeningArgs | MonthlyListeningFindManyArgs)
    ? MonthlyListening  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'artist' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MonthlyListeningArgs | MonthlyListeningFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'artist' ? UserGetPayload<S['select'][P]> :  P extends keyof MonthlyListening ? MonthlyListening[P] : never
  } 
      : MonthlyListening


  type MonthlyListeningCountArgs = 
    Omit<MonthlyListeningFindManyArgs, 'select' | 'include'> & {
      select?: MonthlyListeningCountAggregateInputType | true
    }

  export interface MonthlyListeningDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one MonthlyListening that matches the filter.
     * @param {MonthlyListeningFindUniqueArgs} args - Arguments to find a MonthlyListening
     * @example
     * // Get one MonthlyListening
     * const monthlyListening = await prisma.monthlyListening.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MonthlyListeningFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MonthlyListeningFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MonthlyListening'> extends True ? Prisma__MonthlyListeningClient<MonthlyListeningGetPayload<T>> : Prisma__MonthlyListeningClient<MonthlyListeningGetPayload<T> | null, null>

    /**
     * Find one MonthlyListening that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MonthlyListeningFindUniqueOrThrowArgs} args - Arguments to find a MonthlyListening
     * @example
     * // Get one MonthlyListening
     * const monthlyListening = await prisma.monthlyListening.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MonthlyListeningFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MonthlyListeningFindUniqueOrThrowArgs>
    ): Prisma__MonthlyListeningClient<MonthlyListeningGetPayload<T>>

    /**
     * Find the first MonthlyListening that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthlyListeningFindFirstArgs} args - Arguments to find a MonthlyListening
     * @example
     * // Get one MonthlyListening
     * const monthlyListening = await prisma.monthlyListening.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MonthlyListeningFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MonthlyListeningFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MonthlyListening'> extends True ? Prisma__MonthlyListeningClient<MonthlyListeningGetPayload<T>> : Prisma__MonthlyListeningClient<MonthlyListeningGetPayload<T> | null, null>

    /**
     * Find the first MonthlyListening that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthlyListeningFindFirstOrThrowArgs} args - Arguments to find a MonthlyListening
     * @example
     * // Get one MonthlyListening
     * const monthlyListening = await prisma.monthlyListening.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MonthlyListeningFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MonthlyListeningFindFirstOrThrowArgs>
    ): Prisma__MonthlyListeningClient<MonthlyListeningGetPayload<T>>

    /**
     * Find zero or more MonthlyListenings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthlyListeningFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MonthlyListenings
     * const monthlyListenings = await prisma.monthlyListening.findMany()
     * 
     * // Get first 10 MonthlyListenings
     * const monthlyListenings = await prisma.monthlyListening.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const monthlyListeningWithIdOnly = await prisma.monthlyListening.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MonthlyListeningFindManyArgs>(
      args?: SelectSubset<T, MonthlyListeningFindManyArgs>
    ): Prisma.PrismaPromise<Array<MonthlyListeningGetPayload<T>>>

    /**
     * Create a MonthlyListening.
     * @param {MonthlyListeningCreateArgs} args - Arguments to create a MonthlyListening.
     * @example
     * // Create one MonthlyListening
     * const MonthlyListening = await prisma.monthlyListening.create({
     *   data: {
     *     // ... data to create a MonthlyListening
     *   }
     * })
     * 
    **/
    create<T extends MonthlyListeningCreateArgs>(
      args: SelectSubset<T, MonthlyListeningCreateArgs>
    ): Prisma__MonthlyListeningClient<MonthlyListeningGetPayload<T>>

    /**
     * Create many MonthlyListenings.
     *     @param {MonthlyListeningCreateManyArgs} args - Arguments to create many MonthlyListenings.
     *     @example
     *     // Create many MonthlyListenings
     *     const monthlyListening = await prisma.monthlyListening.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MonthlyListeningCreateManyArgs>(
      args?: SelectSubset<T, MonthlyListeningCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MonthlyListening.
     * @param {MonthlyListeningDeleteArgs} args - Arguments to delete one MonthlyListening.
     * @example
     * // Delete one MonthlyListening
     * const MonthlyListening = await prisma.monthlyListening.delete({
     *   where: {
     *     // ... filter to delete one MonthlyListening
     *   }
     * })
     * 
    **/
    delete<T extends MonthlyListeningDeleteArgs>(
      args: SelectSubset<T, MonthlyListeningDeleteArgs>
    ): Prisma__MonthlyListeningClient<MonthlyListeningGetPayload<T>>

    /**
     * Update one MonthlyListening.
     * @param {MonthlyListeningUpdateArgs} args - Arguments to update one MonthlyListening.
     * @example
     * // Update one MonthlyListening
     * const monthlyListening = await prisma.monthlyListening.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MonthlyListeningUpdateArgs>(
      args: SelectSubset<T, MonthlyListeningUpdateArgs>
    ): Prisma__MonthlyListeningClient<MonthlyListeningGetPayload<T>>

    /**
     * Delete zero or more MonthlyListenings.
     * @param {MonthlyListeningDeleteManyArgs} args - Arguments to filter MonthlyListenings to delete.
     * @example
     * // Delete a few MonthlyListenings
     * const { count } = await prisma.monthlyListening.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MonthlyListeningDeleteManyArgs>(
      args?: SelectSubset<T, MonthlyListeningDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MonthlyListenings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthlyListeningUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MonthlyListenings
     * const monthlyListening = await prisma.monthlyListening.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MonthlyListeningUpdateManyArgs>(
      args: SelectSubset<T, MonthlyListeningUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MonthlyListening.
     * @param {MonthlyListeningUpsertArgs} args - Arguments to update or create a MonthlyListening.
     * @example
     * // Update or create a MonthlyListening
     * const monthlyListening = await prisma.monthlyListening.upsert({
     *   create: {
     *     // ... data to create a MonthlyListening
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MonthlyListening we want to update
     *   }
     * })
    **/
    upsert<T extends MonthlyListeningUpsertArgs>(
      args: SelectSubset<T, MonthlyListeningUpsertArgs>
    ): Prisma__MonthlyListeningClient<MonthlyListeningGetPayload<T>>

    /**
     * Count the number of MonthlyListenings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthlyListeningCountArgs} args - Arguments to filter MonthlyListenings to count.
     * @example
     * // Count the number of MonthlyListenings
     * const count = await prisma.monthlyListening.count({
     *   where: {
     *     // ... the filter for the MonthlyListenings we want to count
     *   }
     * })
    **/
    count<T extends MonthlyListeningCountArgs>(
      args?: Subset<T, MonthlyListeningCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MonthlyListeningCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MonthlyListening.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthlyListeningAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MonthlyListeningAggregateArgs>(args: Subset<T, MonthlyListeningAggregateArgs>): Prisma.PrismaPromise<GetMonthlyListeningAggregateType<T>>

    /**
     * Group by MonthlyListening.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthlyListeningGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MonthlyListeningGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MonthlyListeningGroupByArgs['orderBy'] }
        : { orderBy?: MonthlyListeningGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MonthlyListeningGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMonthlyListeningGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MonthlyListening.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MonthlyListeningClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    artist<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MonthlyListening base type for findUnique actions
   */
  export type MonthlyListeningFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the MonthlyListening
     */
    select?: MonthlyListeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MonthlyListeningInclude | null
    /**
     * Filter, which MonthlyListening to fetch.
     */
    where: MonthlyListeningWhereUniqueInput
  }

  /**
   * MonthlyListening findUnique
   */
  export interface MonthlyListeningFindUniqueArgs extends MonthlyListeningFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MonthlyListening findUniqueOrThrow
   */
  export type MonthlyListeningFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MonthlyListening
     */
    select?: MonthlyListeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MonthlyListeningInclude | null
    /**
     * Filter, which MonthlyListening to fetch.
     */
    where: MonthlyListeningWhereUniqueInput
  }


  /**
   * MonthlyListening base type for findFirst actions
   */
  export type MonthlyListeningFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the MonthlyListening
     */
    select?: MonthlyListeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MonthlyListeningInclude | null
    /**
     * Filter, which MonthlyListening to fetch.
     */
    where?: MonthlyListeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonthlyListenings to fetch.
     */
    orderBy?: Enumerable<MonthlyListeningOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MonthlyListenings.
     */
    cursor?: MonthlyListeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonthlyListenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonthlyListenings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MonthlyListenings.
     */
    distinct?: Enumerable<MonthlyListeningScalarFieldEnum>
  }

  /**
   * MonthlyListening findFirst
   */
  export interface MonthlyListeningFindFirstArgs extends MonthlyListeningFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MonthlyListening findFirstOrThrow
   */
  export type MonthlyListeningFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MonthlyListening
     */
    select?: MonthlyListeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MonthlyListeningInclude | null
    /**
     * Filter, which MonthlyListening to fetch.
     */
    where?: MonthlyListeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonthlyListenings to fetch.
     */
    orderBy?: Enumerable<MonthlyListeningOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MonthlyListenings.
     */
    cursor?: MonthlyListeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonthlyListenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonthlyListenings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MonthlyListenings.
     */
    distinct?: Enumerable<MonthlyListeningScalarFieldEnum>
  }


  /**
   * MonthlyListening findMany
   */
  export type MonthlyListeningFindManyArgs = {
    /**
     * Select specific fields to fetch from the MonthlyListening
     */
    select?: MonthlyListeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MonthlyListeningInclude | null
    /**
     * Filter, which MonthlyListenings to fetch.
     */
    where?: MonthlyListeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonthlyListenings to fetch.
     */
    orderBy?: Enumerable<MonthlyListeningOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MonthlyListenings.
     */
    cursor?: MonthlyListeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonthlyListenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonthlyListenings.
     */
    skip?: number
    distinct?: Enumerable<MonthlyListeningScalarFieldEnum>
  }


  /**
   * MonthlyListening create
   */
  export type MonthlyListeningCreateArgs = {
    /**
     * Select specific fields to fetch from the MonthlyListening
     */
    select?: MonthlyListeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MonthlyListeningInclude | null
    /**
     * The data needed to create a MonthlyListening.
     */
    data: XOR<MonthlyListeningCreateInput, MonthlyListeningUncheckedCreateInput>
  }


  /**
   * MonthlyListening createMany
   */
  export type MonthlyListeningCreateManyArgs = {
    /**
     * The data used to create many MonthlyListenings.
     */
    data: Enumerable<MonthlyListeningCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MonthlyListening update
   */
  export type MonthlyListeningUpdateArgs = {
    /**
     * Select specific fields to fetch from the MonthlyListening
     */
    select?: MonthlyListeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MonthlyListeningInclude | null
    /**
     * The data needed to update a MonthlyListening.
     */
    data: XOR<MonthlyListeningUpdateInput, MonthlyListeningUncheckedUpdateInput>
    /**
     * Choose, which MonthlyListening to update.
     */
    where: MonthlyListeningWhereUniqueInput
  }


  /**
   * MonthlyListening updateMany
   */
  export type MonthlyListeningUpdateManyArgs = {
    /**
     * The data used to update MonthlyListenings.
     */
    data: XOR<MonthlyListeningUpdateManyMutationInput, MonthlyListeningUncheckedUpdateManyInput>
    /**
     * Filter which MonthlyListenings to update
     */
    where?: MonthlyListeningWhereInput
  }


  /**
   * MonthlyListening upsert
   */
  export type MonthlyListeningUpsertArgs = {
    /**
     * Select specific fields to fetch from the MonthlyListening
     */
    select?: MonthlyListeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MonthlyListeningInclude | null
    /**
     * The filter to search for the MonthlyListening to update in case it exists.
     */
    where: MonthlyListeningWhereUniqueInput
    /**
     * In case the MonthlyListening found by the `where` argument doesn't exist, create a new MonthlyListening with this data.
     */
    create: XOR<MonthlyListeningCreateInput, MonthlyListeningUncheckedCreateInput>
    /**
     * In case the MonthlyListening was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MonthlyListeningUpdateInput, MonthlyListeningUncheckedUpdateInput>
  }


  /**
   * MonthlyListening delete
   */
  export type MonthlyListeningDeleteArgs = {
    /**
     * Select specific fields to fetch from the MonthlyListening
     */
    select?: MonthlyListeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MonthlyListeningInclude | null
    /**
     * Filter which MonthlyListening to delete.
     */
    where: MonthlyListeningWhereUniqueInput
  }


  /**
   * MonthlyListening deleteMany
   */
  export type MonthlyListeningDeleteManyArgs = {
    /**
     * Filter which MonthlyListenings to delete
     */
    where?: MonthlyListeningWhereInput
  }


  /**
   * MonthlyListening without action
   */
  export type MonthlyListeningArgs = {
    /**
     * Select specific fields to fetch from the MonthlyListening
     */
    select?: MonthlyListeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MonthlyListeningInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AlbumScalarFieldEnum: {
    id: 'id',
    artistId: 'artistId',
    genreId: 'genreId',
    name: 'name',
    type: 'type',
    coverCID: 'coverCID',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AlbumScalarFieldEnum = (typeof AlbumScalarFieldEnum)[keyof typeof AlbumScalarFieldEnum]


  export const GenreScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type GenreScalarFieldEnum = (typeof GenreScalarFieldEnum)[keyof typeof GenreScalarFieldEnum]


  export const MonthlyListeningScalarFieldEnum: {
    id: 'id',
    artistId: 'artistId',
    date: 'date',
    listenings: 'listenings'
  };

  export type MonthlyListeningScalarFieldEnum = (typeof MonthlyListeningScalarFieldEnum)[keyof typeof MonthlyListeningScalarFieldEnum]


  export const PlaylistScalarFieldEnum: {
    id: 'id',
    creatorId: 'creatorId',
    name: 'name',
    likes: 'likes',
    musics: 'musics',
    coverCID: 'coverCID',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PlaylistScalarFieldEnum = (typeof PlaylistScalarFieldEnum)[keyof typeof PlaylistScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    address: 'address',
    username: 'username',
    email: 'email',
    password: 'password',
    myLikedMusics: 'myLikedMusics',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    address?: StringFilter | string
    username?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    subscribers?: UserListRelationFilter
    likedArtists?: UserListRelationFilter
    albums?: AlbumListRelationFilter
    likedAlbums?: AlbumListRelationFilter
    playlists?: PlaylistListRelationFilter
    likedPlaylists?: PlaylistListRelationFilter
    monthlyListenings?: MonthlyListeningListRelationFilter
    myLikedMusics?: StringNullableListFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    address?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    subscribers?: UserOrderByRelationAggregateInput
    likedArtists?: UserOrderByRelationAggregateInput
    albums?: AlbumOrderByRelationAggregateInput
    likedAlbums?: AlbumOrderByRelationAggregateInput
    playlists?: PlaylistOrderByRelationAggregateInput
    likedPlaylists?: PlaylistOrderByRelationAggregateInput
    monthlyListenings?: MonthlyListeningOrderByRelationAggregateInput
    myLikedMusics?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    address?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    myLikedMusics?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    address?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    myLikedMusics?: StringNullableListFilter
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AlbumWhereInput = {
    AND?: Enumerable<AlbumWhereInput>
    OR?: Enumerable<AlbumWhereInput>
    NOT?: Enumerable<AlbumWhereInput>
    id?: IntFilter | number
    artist?: XOR<UserRelationFilter, UserWhereInput>
    subscribers?: UserListRelationFilter
    genre?: XOR<GenreRelationFilter, GenreWhereInput>
    artistId?: IntFilter | number
    genreId?: IntFilter | number
    name?: StringFilter | string
    type?: EnumAlbumTypeFilter | AlbumType
    coverCID?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type AlbumOrderByWithRelationInput = {
    id?: SortOrder
    artist?: UserOrderByWithRelationInput
    subscribers?: UserOrderByRelationAggregateInput
    genre?: GenreOrderByWithRelationInput
    artistId?: SortOrder
    genreId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    coverCID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlbumWhereUniqueInput = {
    id?: number
  }

  export type AlbumOrderByWithAggregationInput = {
    id?: SortOrder
    artistId?: SortOrder
    genreId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    coverCID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AlbumCountOrderByAggregateInput
    _avg?: AlbumAvgOrderByAggregateInput
    _max?: AlbumMaxOrderByAggregateInput
    _min?: AlbumMinOrderByAggregateInput
    _sum?: AlbumSumOrderByAggregateInput
  }

  export type AlbumScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AlbumScalarWhereWithAggregatesInput>
    OR?: Enumerable<AlbumScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AlbumScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    artistId?: IntWithAggregatesFilter | number
    genreId?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    type?: EnumAlbumTypeWithAggregatesFilter | AlbumType
    coverCID?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PlaylistWhereInput = {
    AND?: Enumerable<PlaylistWhereInput>
    OR?: Enumerable<PlaylistWhereInput>
    NOT?: Enumerable<PlaylistWhereInput>
    id?: IntFilter | number
    creator?: XOR<UserRelationFilter, UserWhereInput>
    subscribers?: UserListRelationFilter
    creatorId?: IntFilter | number
    name?: StringFilter | string
    likes?: IntFilter | number
    musics?: StringNullableListFilter
    coverCID?: StringFilter | string
    description?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type PlaylistOrderByWithRelationInput = {
    id?: SortOrder
    creator?: UserOrderByWithRelationInput
    subscribers?: UserOrderByRelationAggregateInput
    creatorId?: SortOrder
    name?: SortOrder
    likes?: SortOrder
    musics?: SortOrder
    coverCID?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlaylistWhereUniqueInput = {
    id?: number
  }

  export type PlaylistOrderByWithAggregationInput = {
    id?: SortOrder
    creatorId?: SortOrder
    name?: SortOrder
    likes?: SortOrder
    musics?: SortOrder
    coverCID?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PlaylistCountOrderByAggregateInput
    _avg?: PlaylistAvgOrderByAggregateInput
    _max?: PlaylistMaxOrderByAggregateInput
    _min?: PlaylistMinOrderByAggregateInput
    _sum?: PlaylistSumOrderByAggregateInput
  }

  export type PlaylistScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PlaylistScalarWhereWithAggregatesInput>
    OR?: Enumerable<PlaylistScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PlaylistScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    creatorId?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    likes?: IntWithAggregatesFilter | number
    musics?: StringNullableListFilter
    coverCID?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type GenreWhereInput = {
    AND?: Enumerable<GenreWhereInput>
    OR?: Enumerable<GenreWhereInput>
    NOT?: Enumerable<GenreWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    albums?: AlbumListRelationFilter
  }

  export type GenreOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    albums?: AlbumOrderByRelationAggregateInput
  }

  export type GenreWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type GenreOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: GenreCountOrderByAggregateInput
    _avg?: GenreAvgOrderByAggregateInput
    _max?: GenreMaxOrderByAggregateInput
    _min?: GenreMinOrderByAggregateInput
    _sum?: GenreSumOrderByAggregateInput
  }

  export type GenreScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GenreScalarWhereWithAggregatesInput>
    OR?: Enumerable<GenreScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GenreScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type MonthlyListeningWhereInput = {
    AND?: Enumerable<MonthlyListeningWhereInput>
    OR?: Enumerable<MonthlyListeningWhereInput>
    NOT?: Enumerable<MonthlyListeningWhereInput>
    id?: IntFilter | number
    artist?: XOR<UserRelationFilter, UserWhereInput>
    artistId?: IntFilter | number
    date?: DateTimeFilter | Date | string
    listenings?: IntFilter | number
  }

  export type MonthlyListeningOrderByWithRelationInput = {
    id?: SortOrder
    artist?: UserOrderByWithRelationInput
    artistId?: SortOrder
    date?: SortOrder
    listenings?: SortOrder
  }

  export type MonthlyListeningWhereUniqueInput = {
    id?: number
  }

  export type MonthlyListeningOrderByWithAggregationInput = {
    id?: SortOrder
    artistId?: SortOrder
    date?: SortOrder
    listenings?: SortOrder
    _count?: MonthlyListeningCountOrderByAggregateInput
    _avg?: MonthlyListeningAvgOrderByAggregateInput
    _max?: MonthlyListeningMaxOrderByAggregateInput
    _min?: MonthlyListeningMinOrderByAggregateInput
    _sum?: MonthlyListeningSumOrderByAggregateInput
  }

  export type MonthlyListeningScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MonthlyListeningScalarWhereWithAggregatesInput>
    OR?: Enumerable<MonthlyListeningScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MonthlyListeningScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    artistId?: IntWithAggregatesFilter | number
    date?: DateTimeWithAggregatesFilter | Date | string
    listenings?: IntWithAggregatesFilter | number
  }

  export type UserCreateInput = {
    address?: string
    username: string
    email: string
    password: string
    subscribers?: UserCreateNestedManyWithoutLikedArtistsInput
    likedArtists?: UserCreateNestedManyWithoutSubscribersInput
    albums?: AlbumCreateNestedManyWithoutArtistInput
    likedAlbums?: AlbumCreateNestedManyWithoutSubscribersInput
    playlists?: PlaylistCreateNestedManyWithoutCreatorInput
    likedPlaylists?: PlaylistCreateNestedManyWithoutSubscribersInput
    monthlyListenings?: MonthlyListeningCreateNestedManyWithoutArtistInput
    myLikedMusics?: UserCreatemyLikedMusicsInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    address?: string
    username: string
    email: string
    password: string
    subscribers?: UserUncheckedCreateNestedManyWithoutLikedArtistsInput
    likedArtists?: UserUncheckedCreateNestedManyWithoutSubscribersInput
    albums?: AlbumUncheckedCreateNestedManyWithoutArtistInput
    likedAlbums?: AlbumUncheckedCreateNestedManyWithoutSubscribersInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutCreatorInput
    likedPlaylists?: PlaylistUncheckedCreateNestedManyWithoutSubscribersInput
    monthlyListenings?: MonthlyListeningUncheckedCreateNestedManyWithoutArtistInput
    myLikedMusics?: UserCreatemyLikedMusicsInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    subscribers?: UserUpdateManyWithoutLikedArtistsNestedInput
    likedArtists?: UserUpdateManyWithoutSubscribersNestedInput
    albums?: AlbumUpdateManyWithoutArtistNestedInput
    likedAlbums?: AlbumUpdateManyWithoutSubscribersNestedInput
    playlists?: PlaylistUpdateManyWithoutCreatorNestedInput
    likedPlaylists?: PlaylistUpdateManyWithoutSubscribersNestedInput
    monthlyListenings?: MonthlyListeningUpdateManyWithoutArtistNestedInput
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    subscribers?: UserUncheckedUpdateManyWithoutLikedArtistsNestedInput
    likedArtists?: UserUncheckedUpdateManyWithoutSubscribersNestedInput
    albums?: AlbumUncheckedUpdateManyWithoutArtistNestedInput
    likedAlbums?: AlbumUncheckedUpdateManyWithoutSubscribersNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutCreatorNestedInput
    likedPlaylists?: PlaylistUncheckedUpdateManyWithoutSubscribersNestedInput
    monthlyListenings?: MonthlyListeningUncheckedUpdateManyWithoutArtistNestedInput
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: number
    address?: string
    username: string
    email: string
    password: string
    myLikedMusics?: UserCreatemyLikedMusicsInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumCreateInput = {
    artist: UserCreateNestedOneWithoutAlbumsInput
    subscribers?: UserCreateNestedManyWithoutLikedAlbumsInput
    genre: GenreCreateNestedOneWithoutAlbumsInput
    name: string
    type: AlbumType
    coverCID: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumUncheckedCreateInput = {
    id?: number
    subscribers?: UserUncheckedCreateNestedManyWithoutLikedAlbumsInput
    artistId: number
    genreId: number
    name: string
    type: AlbumType
    coverCID: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumUpdateInput = {
    artist?: UserUpdateOneRequiredWithoutAlbumsNestedInput
    subscribers?: UserUpdateManyWithoutLikedAlbumsNestedInput
    genre?: GenreUpdateOneRequiredWithoutAlbumsNestedInput
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAlbumTypeFieldUpdateOperationsInput | AlbumType
    coverCID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    subscribers?: UserUncheckedUpdateManyWithoutLikedAlbumsNestedInput
    artistId?: IntFieldUpdateOperationsInput | number
    genreId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAlbumTypeFieldUpdateOperationsInput | AlbumType
    coverCID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumCreateManyInput = {
    id?: number
    artistId: number
    genreId: number
    name: string
    type: AlbumType
    coverCID: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAlbumTypeFieldUpdateOperationsInput | AlbumType
    coverCID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    genreId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAlbumTypeFieldUpdateOperationsInput | AlbumType
    coverCID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistCreateInput = {
    creator: UserCreateNestedOneWithoutPlaylistsInput
    subscribers?: UserCreateNestedManyWithoutLikedPlaylistsInput
    name: string
    likes: number
    musics?: PlaylistCreatemusicsInput | Enumerable<string>
    coverCID: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistUncheckedCreateInput = {
    id?: number
    subscribers?: UserUncheckedCreateNestedManyWithoutLikedPlaylistsInput
    creatorId: number
    name: string
    likes: number
    musics?: PlaylistCreatemusicsInput | Enumerable<string>
    coverCID: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistUpdateInput = {
    creator?: UserUpdateOneRequiredWithoutPlaylistsNestedInput
    subscribers?: UserUpdateManyWithoutLikedPlaylistsNestedInput
    name?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    musics?: PlaylistUpdatemusicsInput | Enumerable<string>
    coverCID?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    subscribers?: UserUncheckedUpdateManyWithoutLikedPlaylistsNestedInput
    creatorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    musics?: PlaylistUpdatemusicsInput | Enumerable<string>
    coverCID?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistCreateManyInput = {
    id?: number
    creatorId: number
    name: string
    likes: number
    musics?: PlaylistCreatemusicsInput | Enumerable<string>
    coverCID: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    musics?: PlaylistUpdatemusicsInput | Enumerable<string>
    coverCID?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    musics?: PlaylistUpdatemusicsInput | Enumerable<string>
    coverCID?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GenreCreateInput = {
    name: string
    albums?: AlbumCreateNestedManyWithoutGenreInput
  }

  export type GenreUncheckedCreateInput = {
    id?: number
    name: string
    albums?: AlbumUncheckedCreateNestedManyWithoutGenreInput
  }

  export type GenreUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    albums?: AlbumUpdateManyWithoutGenreNestedInput
  }

  export type GenreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    albums?: AlbumUncheckedUpdateManyWithoutGenreNestedInput
  }

  export type GenreCreateManyInput = {
    id?: number
    name: string
  }

  export type GenreUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type GenreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type MonthlyListeningCreateInput = {
    artist: UserCreateNestedOneWithoutMonthlyListeningsInput
    date?: Date | string
    listenings: number
  }

  export type MonthlyListeningUncheckedCreateInput = {
    id?: number
    artistId: number
    date?: Date | string
    listenings: number
  }

  export type MonthlyListeningUpdateInput = {
    artist?: UserUpdateOneRequiredWithoutMonthlyListeningsNestedInput
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    listenings?: IntFieldUpdateOperationsInput | number
  }

  export type MonthlyListeningUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    listenings?: IntFieldUpdateOperationsInput | number
  }

  export type MonthlyListeningCreateManyInput = {
    id?: number
    artistId: number
    date?: Date | string
    listenings: number
  }

  export type MonthlyListeningUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    listenings?: IntFieldUpdateOperationsInput | number
  }

  export type MonthlyListeningUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    listenings?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type AlbumListRelationFilter = {
    every?: AlbumWhereInput
    some?: AlbumWhereInput
    none?: AlbumWhereInput
  }

  export type PlaylistListRelationFilter = {
    every?: PlaylistWhereInput
    some?: PlaylistWhereInput
    none?: PlaylistWhereInput
  }

  export type MonthlyListeningListRelationFilter = {
    every?: MonthlyListeningWhereInput
    some?: MonthlyListeningWhereInput
    none?: MonthlyListeningWhereInput
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlbumOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlaylistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MonthlyListeningOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    myLikedMusics?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type GenreRelationFilter = {
    is?: GenreWhereInput
    isNot?: GenreWhereInput
  }

  export type EnumAlbumTypeFilter = {
    equals?: AlbumType
    in?: Enumerable<AlbumType>
    notIn?: Enumerable<AlbumType>
    not?: NestedEnumAlbumTypeFilter | AlbumType
  }

  export type AlbumCountOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    genreId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    coverCID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlbumAvgOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    genreId?: SortOrder
  }

  export type AlbumMaxOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    genreId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    coverCID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlbumMinOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    genreId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    coverCID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlbumSumOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    genreId?: SortOrder
  }

  export type EnumAlbumTypeWithAggregatesFilter = {
    equals?: AlbumType
    in?: Enumerable<AlbumType>
    notIn?: Enumerable<AlbumType>
    not?: NestedEnumAlbumTypeWithAggregatesFilter | AlbumType
    _count?: NestedIntFilter
    _min?: NestedEnumAlbumTypeFilter
    _max?: NestedEnumAlbumTypeFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type PlaylistCountOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    name?: SortOrder
    likes?: SortOrder
    musics?: SortOrder
    coverCID?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlaylistAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    likes?: SortOrder
  }

  export type PlaylistMaxOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    name?: SortOrder
    likes?: SortOrder
    coverCID?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlaylistMinOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    name?: SortOrder
    likes?: SortOrder
    coverCID?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlaylistSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    likes?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type GenreCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type GenreAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GenreMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type GenreMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type GenreSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MonthlyListeningCountOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    date?: SortOrder
    listenings?: SortOrder
  }

  export type MonthlyListeningAvgOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    listenings?: SortOrder
  }

  export type MonthlyListeningMaxOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    date?: SortOrder
    listenings?: SortOrder
  }

  export type MonthlyListeningMinOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    date?: SortOrder
    listenings?: SortOrder
  }

  export type MonthlyListeningSumOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    listenings?: SortOrder
  }

  export type UserCreateNestedManyWithoutLikedArtistsInput = {
    create?: XOR<Enumerable<UserCreateWithoutLikedArtistsInput>, Enumerable<UserUncheckedCreateWithoutLikedArtistsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutLikedArtistsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserCreateNestedManyWithoutSubscribersInput = {
    create?: XOR<Enumerable<UserCreateWithoutSubscribersInput>, Enumerable<UserUncheckedCreateWithoutSubscribersInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutSubscribersInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type AlbumCreateNestedManyWithoutArtistInput = {
    create?: XOR<Enumerable<AlbumCreateWithoutArtistInput>, Enumerable<AlbumUncheckedCreateWithoutArtistInput>>
    connectOrCreate?: Enumerable<AlbumCreateOrConnectWithoutArtistInput>
    createMany?: AlbumCreateManyArtistInputEnvelope
    connect?: Enumerable<AlbumWhereUniqueInput>
  }

  export type AlbumCreateNestedManyWithoutSubscribersInput = {
    create?: XOR<Enumerable<AlbumCreateWithoutSubscribersInput>, Enumerable<AlbumUncheckedCreateWithoutSubscribersInput>>
    connectOrCreate?: Enumerable<AlbumCreateOrConnectWithoutSubscribersInput>
    connect?: Enumerable<AlbumWhereUniqueInput>
  }

  export type PlaylistCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<PlaylistCreateWithoutCreatorInput>, Enumerable<PlaylistUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<PlaylistCreateOrConnectWithoutCreatorInput>
    createMany?: PlaylistCreateManyCreatorInputEnvelope
    connect?: Enumerable<PlaylistWhereUniqueInput>
  }

  export type PlaylistCreateNestedManyWithoutSubscribersInput = {
    create?: XOR<Enumerable<PlaylistCreateWithoutSubscribersInput>, Enumerable<PlaylistUncheckedCreateWithoutSubscribersInput>>
    connectOrCreate?: Enumerable<PlaylistCreateOrConnectWithoutSubscribersInput>
    connect?: Enumerable<PlaylistWhereUniqueInput>
  }

  export type MonthlyListeningCreateNestedManyWithoutArtistInput = {
    create?: XOR<Enumerable<MonthlyListeningCreateWithoutArtistInput>, Enumerable<MonthlyListeningUncheckedCreateWithoutArtistInput>>
    connectOrCreate?: Enumerable<MonthlyListeningCreateOrConnectWithoutArtistInput>
    createMany?: MonthlyListeningCreateManyArtistInputEnvelope
    connect?: Enumerable<MonthlyListeningWhereUniqueInput>
  }

  export type UserCreatemyLikedMusicsInput = {
    set: Enumerable<string>
  }

  export type UserUncheckedCreateNestedManyWithoutLikedArtistsInput = {
    create?: XOR<Enumerable<UserCreateWithoutLikedArtistsInput>, Enumerable<UserUncheckedCreateWithoutLikedArtistsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutLikedArtistsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutSubscribersInput = {
    create?: XOR<Enumerable<UserCreateWithoutSubscribersInput>, Enumerable<UserUncheckedCreateWithoutSubscribersInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutSubscribersInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type AlbumUncheckedCreateNestedManyWithoutArtistInput = {
    create?: XOR<Enumerable<AlbumCreateWithoutArtistInput>, Enumerable<AlbumUncheckedCreateWithoutArtistInput>>
    connectOrCreate?: Enumerable<AlbumCreateOrConnectWithoutArtistInput>
    createMany?: AlbumCreateManyArtistInputEnvelope
    connect?: Enumerable<AlbumWhereUniqueInput>
  }

  export type AlbumUncheckedCreateNestedManyWithoutSubscribersInput = {
    create?: XOR<Enumerable<AlbumCreateWithoutSubscribersInput>, Enumerable<AlbumUncheckedCreateWithoutSubscribersInput>>
    connectOrCreate?: Enumerable<AlbumCreateOrConnectWithoutSubscribersInput>
    connect?: Enumerable<AlbumWhereUniqueInput>
  }

  export type PlaylistUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<PlaylistCreateWithoutCreatorInput>, Enumerable<PlaylistUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<PlaylistCreateOrConnectWithoutCreatorInput>
    createMany?: PlaylistCreateManyCreatorInputEnvelope
    connect?: Enumerable<PlaylistWhereUniqueInput>
  }

  export type PlaylistUncheckedCreateNestedManyWithoutSubscribersInput = {
    create?: XOR<Enumerable<PlaylistCreateWithoutSubscribersInput>, Enumerable<PlaylistUncheckedCreateWithoutSubscribersInput>>
    connectOrCreate?: Enumerable<PlaylistCreateOrConnectWithoutSubscribersInput>
    connect?: Enumerable<PlaylistWhereUniqueInput>
  }

  export type MonthlyListeningUncheckedCreateNestedManyWithoutArtistInput = {
    create?: XOR<Enumerable<MonthlyListeningCreateWithoutArtistInput>, Enumerable<MonthlyListeningUncheckedCreateWithoutArtistInput>>
    connectOrCreate?: Enumerable<MonthlyListeningCreateOrConnectWithoutArtistInput>
    createMany?: MonthlyListeningCreateManyArtistInputEnvelope
    connect?: Enumerable<MonthlyListeningWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateManyWithoutLikedArtistsNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutLikedArtistsInput>, Enumerable<UserUncheckedCreateWithoutLikedArtistsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutLikedArtistsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutLikedArtistsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutLikedArtistsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutLikedArtistsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUpdateManyWithoutSubscribersNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutSubscribersInput>, Enumerable<UserUncheckedCreateWithoutSubscribersInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutSubscribersInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutSubscribersInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutSubscribersInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutSubscribersInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type AlbumUpdateManyWithoutArtistNestedInput = {
    create?: XOR<Enumerable<AlbumCreateWithoutArtistInput>, Enumerable<AlbumUncheckedCreateWithoutArtistInput>>
    connectOrCreate?: Enumerable<AlbumCreateOrConnectWithoutArtistInput>
    upsert?: Enumerable<AlbumUpsertWithWhereUniqueWithoutArtistInput>
    createMany?: AlbumCreateManyArtistInputEnvelope
    set?: Enumerable<AlbumWhereUniqueInput>
    disconnect?: Enumerable<AlbumWhereUniqueInput>
    delete?: Enumerable<AlbumWhereUniqueInput>
    connect?: Enumerable<AlbumWhereUniqueInput>
    update?: Enumerable<AlbumUpdateWithWhereUniqueWithoutArtistInput>
    updateMany?: Enumerable<AlbumUpdateManyWithWhereWithoutArtistInput>
    deleteMany?: Enumerable<AlbumScalarWhereInput>
  }

  export type AlbumUpdateManyWithoutSubscribersNestedInput = {
    create?: XOR<Enumerable<AlbumCreateWithoutSubscribersInput>, Enumerable<AlbumUncheckedCreateWithoutSubscribersInput>>
    connectOrCreate?: Enumerable<AlbumCreateOrConnectWithoutSubscribersInput>
    upsert?: Enumerable<AlbumUpsertWithWhereUniqueWithoutSubscribersInput>
    set?: Enumerable<AlbumWhereUniqueInput>
    disconnect?: Enumerable<AlbumWhereUniqueInput>
    delete?: Enumerable<AlbumWhereUniqueInput>
    connect?: Enumerable<AlbumWhereUniqueInput>
    update?: Enumerable<AlbumUpdateWithWhereUniqueWithoutSubscribersInput>
    updateMany?: Enumerable<AlbumUpdateManyWithWhereWithoutSubscribersInput>
    deleteMany?: Enumerable<AlbumScalarWhereInput>
  }

  export type PlaylistUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<Enumerable<PlaylistCreateWithoutCreatorInput>, Enumerable<PlaylistUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<PlaylistCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<PlaylistUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: PlaylistCreateManyCreatorInputEnvelope
    set?: Enumerable<PlaylistWhereUniqueInput>
    disconnect?: Enumerable<PlaylistWhereUniqueInput>
    delete?: Enumerable<PlaylistWhereUniqueInput>
    connect?: Enumerable<PlaylistWhereUniqueInput>
    update?: Enumerable<PlaylistUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<PlaylistUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<PlaylistScalarWhereInput>
  }

  export type PlaylistUpdateManyWithoutSubscribersNestedInput = {
    create?: XOR<Enumerable<PlaylistCreateWithoutSubscribersInput>, Enumerable<PlaylistUncheckedCreateWithoutSubscribersInput>>
    connectOrCreate?: Enumerable<PlaylistCreateOrConnectWithoutSubscribersInput>
    upsert?: Enumerable<PlaylistUpsertWithWhereUniqueWithoutSubscribersInput>
    set?: Enumerable<PlaylistWhereUniqueInput>
    disconnect?: Enumerable<PlaylistWhereUniqueInput>
    delete?: Enumerable<PlaylistWhereUniqueInput>
    connect?: Enumerable<PlaylistWhereUniqueInput>
    update?: Enumerable<PlaylistUpdateWithWhereUniqueWithoutSubscribersInput>
    updateMany?: Enumerable<PlaylistUpdateManyWithWhereWithoutSubscribersInput>
    deleteMany?: Enumerable<PlaylistScalarWhereInput>
  }

  export type MonthlyListeningUpdateManyWithoutArtistNestedInput = {
    create?: XOR<Enumerable<MonthlyListeningCreateWithoutArtistInput>, Enumerable<MonthlyListeningUncheckedCreateWithoutArtistInput>>
    connectOrCreate?: Enumerable<MonthlyListeningCreateOrConnectWithoutArtistInput>
    upsert?: Enumerable<MonthlyListeningUpsertWithWhereUniqueWithoutArtistInput>
    createMany?: MonthlyListeningCreateManyArtistInputEnvelope
    set?: Enumerable<MonthlyListeningWhereUniqueInput>
    disconnect?: Enumerable<MonthlyListeningWhereUniqueInput>
    delete?: Enumerable<MonthlyListeningWhereUniqueInput>
    connect?: Enumerable<MonthlyListeningWhereUniqueInput>
    update?: Enumerable<MonthlyListeningUpdateWithWhereUniqueWithoutArtistInput>
    updateMany?: Enumerable<MonthlyListeningUpdateManyWithWhereWithoutArtistInput>
    deleteMany?: Enumerable<MonthlyListeningScalarWhereInput>
  }

  export type UserUpdatemyLikedMusicsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUncheckedUpdateManyWithoutLikedArtistsNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutLikedArtistsInput>, Enumerable<UserUncheckedCreateWithoutLikedArtistsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutLikedArtistsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutLikedArtistsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutLikedArtistsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutLikedArtistsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutSubscribersNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutSubscribersInput>, Enumerable<UserUncheckedCreateWithoutSubscribersInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutSubscribersInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutSubscribersInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutSubscribersInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutSubscribersInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type AlbumUncheckedUpdateManyWithoutArtistNestedInput = {
    create?: XOR<Enumerable<AlbumCreateWithoutArtistInput>, Enumerable<AlbumUncheckedCreateWithoutArtistInput>>
    connectOrCreate?: Enumerable<AlbumCreateOrConnectWithoutArtistInput>
    upsert?: Enumerable<AlbumUpsertWithWhereUniqueWithoutArtistInput>
    createMany?: AlbumCreateManyArtistInputEnvelope
    set?: Enumerable<AlbumWhereUniqueInput>
    disconnect?: Enumerable<AlbumWhereUniqueInput>
    delete?: Enumerable<AlbumWhereUniqueInput>
    connect?: Enumerable<AlbumWhereUniqueInput>
    update?: Enumerable<AlbumUpdateWithWhereUniqueWithoutArtistInput>
    updateMany?: Enumerable<AlbumUpdateManyWithWhereWithoutArtistInput>
    deleteMany?: Enumerable<AlbumScalarWhereInput>
  }

  export type AlbumUncheckedUpdateManyWithoutSubscribersNestedInput = {
    create?: XOR<Enumerable<AlbumCreateWithoutSubscribersInput>, Enumerable<AlbumUncheckedCreateWithoutSubscribersInput>>
    connectOrCreate?: Enumerable<AlbumCreateOrConnectWithoutSubscribersInput>
    upsert?: Enumerable<AlbumUpsertWithWhereUniqueWithoutSubscribersInput>
    set?: Enumerable<AlbumWhereUniqueInput>
    disconnect?: Enumerable<AlbumWhereUniqueInput>
    delete?: Enumerable<AlbumWhereUniqueInput>
    connect?: Enumerable<AlbumWhereUniqueInput>
    update?: Enumerable<AlbumUpdateWithWhereUniqueWithoutSubscribersInput>
    updateMany?: Enumerable<AlbumUpdateManyWithWhereWithoutSubscribersInput>
    deleteMany?: Enumerable<AlbumScalarWhereInput>
  }

  export type PlaylistUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<Enumerable<PlaylistCreateWithoutCreatorInput>, Enumerable<PlaylistUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<PlaylistCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<PlaylistUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: PlaylistCreateManyCreatorInputEnvelope
    set?: Enumerable<PlaylistWhereUniqueInput>
    disconnect?: Enumerable<PlaylistWhereUniqueInput>
    delete?: Enumerable<PlaylistWhereUniqueInput>
    connect?: Enumerable<PlaylistWhereUniqueInput>
    update?: Enumerable<PlaylistUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<PlaylistUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<PlaylistScalarWhereInput>
  }

  export type PlaylistUncheckedUpdateManyWithoutSubscribersNestedInput = {
    create?: XOR<Enumerable<PlaylistCreateWithoutSubscribersInput>, Enumerable<PlaylistUncheckedCreateWithoutSubscribersInput>>
    connectOrCreate?: Enumerable<PlaylistCreateOrConnectWithoutSubscribersInput>
    upsert?: Enumerable<PlaylistUpsertWithWhereUniqueWithoutSubscribersInput>
    set?: Enumerable<PlaylistWhereUniqueInput>
    disconnect?: Enumerable<PlaylistWhereUniqueInput>
    delete?: Enumerable<PlaylistWhereUniqueInput>
    connect?: Enumerable<PlaylistWhereUniqueInput>
    update?: Enumerable<PlaylistUpdateWithWhereUniqueWithoutSubscribersInput>
    updateMany?: Enumerable<PlaylistUpdateManyWithWhereWithoutSubscribersInput>
    deleteMany?: Enumerable<PlaylistScalarWhereInput>
  }

  export type MonthlyListeningUncheckedUpdateManyWithoutArtistNestedInput = {
    create?: XOR<Enumerable<MonthlyListeningCreateWithoutArtistInput>, Enumerable<MonthlyListeningUncheckedCreateWithoutArtistInput>>
    connectOrCreate?: Enumerable<MonthlyListeningCreateOrConnectWithoutArtistInput>
    upsert?: Enumerable<MonthlyListeningUpsertWithWhereUniqueWithoutArtistInput>
    createMany?: MonthlyListeningCreateManyArtistInputEnvelope
    set?: Enumerable<MonthlyListeningWhereUniqueInput>
    disconnect?: Enumerable<MonthlyListeningWhereUniqueInput>
    delete?: Enumerable<MonthlyListeningWhereUniqueInput>
    connect?: Enumerable<MonthlyListeningWhereUniqueInput>
    update?: Enumerable<MonthlyListeningUpdateWithWhereUniqueWithoutArtistInput>
    updateMany?: Enumerable<MonthlyListeningUpdateManyWithWhereWithoutArtistInput>
    deleteMany?: Enumerable<MonthlyListeningScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutAlbumsInput = {
    create?: XOR<UserCreateWithoutAlbumsInput, UserUncheckedCreateWithoutAlbumsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlbumsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutLikedAlbumsInput = {
    create?: XOR<Enumerable<UserCreateWithoutLikedAlbumsInput>, Enumerable<UserUncheckedCreateWithoutLikedAlbumsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutLikedAlbumsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type GenreCreateNestedOneWithoutAlbumsInput = {
    create?: XOR<GenreCreateWithoutAlbumsInput, GenreUncheckedCreateWithoutAlbumsInput>
    connectOrCreate?: GenreCreateOrConnectWithoutAlbumsInput
    connect?: GenreWhereUniqueInput
  }

  export type UserUncheckedCreateNestedManyWithoutLikedAlbumsInput = {
    create?: XOR<Enumerable<UserCreateWithoutLikedAlbumsInput>, Enumerable<UserUncheckedCreateWithoutLikedAlbumsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutLikedAlbumsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutAlbumsNestedInput = {
    create?: XOR<UserCreateWithoutAlbumsInput, UserUncheckedCreateWithoutAlbumsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlbumsInput
    upsert?: UserUpsertWithoutAlbumsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAlbumsInput, UserUncheckedUpdateWithoutAlbumsInput>
  }

  export type UserUpdateManyWithoutLikedAlbumsNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutLikedAlbumsInput>, Enumerable<UserUncheckedCreateWithoutLikedAlbumsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutLikedAlbumsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutLikedAlbumsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutLikedAlbumsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutLikedAlbumsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type GenreUpdateOneRequiredWithoutAlbumsNestedInput = {
    create?: XOR<GenreCreateWithoutAlbumsInput, GenreUncheckedCreateWithoutAlbumsInput>
    connectOrCreate?: GenreCreateOrConnectWithoutAlbumsInput
    upsert?: GenreUpsertWithoutAlbumsInput
    connect?: GenreWhereUniqueInput
    update?: XOR<GenreUpdateWithoutAlbumsInput, GenreUncheckedUpdateWithoutAlbumsInput>
  }

  export type EnumAlbumTypeFieldUpdateOperationsInput = {
    set?: AlbumType
  }

  export type UserUncheckedUpdateManyWithoutLikedAlbumsNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutLikedAlbumsInput>, Enumerable<UserUncheckedCreateWithoutLikedAlbumsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutLikedAlbumsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutLikedAlbumsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutLikedAlbumsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutLikedAlbumsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutPlaylistsInput = {
    create?: XOR<UserCreateWithoutPlaylistsInput, UserUncheckedCreateWithoutPlaylistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlaylistsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutLikedPlaylistsInput = {
    create?: XOR<Enumerable<UserCreateWithoutLikedPlaylistsInput>, Enumerable<UserUncheckedCreateWithoutLikedPlaylistsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutLikedPlaylistsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type PlaylistCreatemusicsInput = {
    set: Enumerable<string>
  }

  export type UserUncheckedCreateNestedManyWithoutLikedPlaylistsInput = {
    create?: XOR<Enumerable<UserCreateWithoutLikedPlaylistsInput>, Enumerable<UserUncheckedCreateWithoutLikedPlaylistsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutLikedPlaylistsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutPlaylistsNestedInput = {
    create?: XOR<UserCreateWithoutPlaylistsInput, UserUncheckedCreateWithoutPlaylistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlaylistsInput
    upsert?: UserUpsertWithoutPlaylistsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPlaylistsInput, UserUncheckedUpdateWithoutPlaylistsInput>
  }

  export type UserUpdateManyWithoutLikedPlaylistsNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutLikedPlaylistsInput>, Enumerable<UserUncheckedCreateWithoutLikedPlaylistsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutLikedPlaylistsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutLikedPlaylistsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutLikedPlaylistsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutLikedPlaylistsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type PlaylistUpdatemusicsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUncheckedUpdateManyWithoutLikedPlaylistsNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutLikedPlaylistsInput>, Enumerable<UserUncheckedCreateWithoutLikedPlaylistsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutLikedPlaylistsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutLikedPlaylistsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutLikedPlaylistsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutLikedPlaylistsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type AlbumCreateNestedManyWithoutGenreInput = {
    create?: XOR<Enumerable<AlbumCreateWithoutGenreInput>, Enumerable<AlbumUncheckedCreateWithoutGenreInput>>
    connectOrCreate?: Enumerable<AlbumCreateOrConnectWithoutGenreInput>
    createMany?: AlbumCreateManyGenreInputEnvelope
    connect?: Enumerable<AlbumWhereUniqueInput>
  }

  export type AlbumUncheckedCreateNestedManyWithoutGenreInput = {
    create?: XOR<Enumerable<AlbumCreateWithoutGenreInput>, Enumerable<AlbumUncheckedCreateWithoutGenreInput>>
    connectOrCreate?: Enumerable<AlbumCreateOrConnectWithoutGenreInput>
    createMany?: AlbumCreateManyGenreInputEnvelope
    connect?: Enumerable<AlbumWhereUniqueInput>
  }

  export type AlbumUpdateManyWithoutGenreNestedInput = {
    create?: XOR<Enumerable<AlbumCreateWithoutGenreInput>, Enumerable<AlbumUncheckedCreateWithoutGenreInput>>
    connectOrCreate?: Enumerable<AlbumCreateOrConnectWithoutGenreInput>
    upsert?: Enumerable<AlbumUpsertWithWhereUniqueWithoutGenreInput>
    createMany?: AlbumCreateManyGenreInputEnvelope
    set?: Enumerable<AlbumWhereUniqueInput>
    disconnect?: Enumerable<AlbumWhereUniqueInput>
    delete?: Enumerable<AlbumWhereUniqueInput>
    connect?: Enumerable<AlbumWhereUniqueInput>
    update?: Enumerable<AlbumUpdateWithWhereUniqueWithoutGenreInput>
    updateMany?: Enumerable<AlbumUpdateManyWithWhereWithoutGenreInput>
    deleteMany?: Enumerable<AlbumScalarWhereInput>
  }

  export type AlbumUncheckedUpdateManyWithoutGenreNestedInput = {
    create?: XOR<Enumerable<AlbumCreateWithoutGenreInput>, Enumerable<AlbumUncheckedCreateWithoutGenreInput>>
    connectOrCreate?: Enumerable<AlbumCreateOrConnectWithoutGenreInput>
    upsert?: Enumerable<AlbumUpsertWithWhereUniqueWithoutGenreInput>
    createMany?: AlbumCreateManyGenreInputEnvelope
    set?: Enumerable<AlbumWhereUniqueInput>
    disconnect?: Enumerable<AlbumWhereUniqueInput>
    delete?: Enumerable<AlbumWhereUniqueInput>
    connect?: Enumerable<AlbumWhereUniqueInput>
    update?: Enumerable<AlbumUpdateWithWhereUniqueWithoutGenreInput>
    updateMany?: Enumerable<AlbumUpdateManyWithWhereWithoutGenreInput>
    deleteMany?: Enumerable<AlbumScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutMonthlyListeningsInput = {
    create?: XOR<UserCreateWithoutMonthlyListeningsInput, UserUncheckedCreateWithoutMonthlyListeningsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMonthlyListeningsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMonthlyListeningsNestedInput = {
    create?: XOR<UserCreateWithoutMonthlyListeningsInput, UserUncheckedCreateWithoutMonthlyListeningsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMonthlyListeningsInput
    upsert?: UserUpsertWithoutMonthlyListeningsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMonthlyListeningsInput, UserUncheckedUpdateWithoutMonthlyListeningsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumAlbumTypeFilter = {
    equals?: AlbumType
    in?: Enumerable<AlbumType>
    notIn?: Enumerable<AlbumType>
    not?: NestedEnumAlbumTypeFilter | AlbumType
  }

  export type NestedEnumAlbumTypeWithAggregatesFilter = {
    equals?: AlbumType
    in?: Enumerable<AlbumType>
    notIn?: Enumerable<AlbumType>
    not?: NestedEnumAlbumTypeWithAggregatesFilter | AlbumType
    _count?: NestedIntFilter
    _min?: NestedEnumAlbumTypeFilter
    _max?: NestedEnumAlbumTypeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type UserCreateWithoutLikedArtistsInput = {
    address?: string
    username: string
    email: string
    password: string
    subscribers?: UserCreateNestedManyWithoutLikedArtistsInput
    albums?: AlbumCreateNestedManyWithoutArtistInput
    likedAlbums?: AlbumCreateNestedManyWithoutSubscribersInput
    playlists?: PlaylistCreateNestedManyWithoutCreatorInput
    likedPlaylists?: PlaylistCreateNestedManyWithoutSubscribersInput
    monthlyListenings?: MonthlyListeningCreateNestedManyWithoutArtistInput
    myLikedMusics?: UserCreatemyLikedMusicsInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutLikedArtistsInput = {
    id?: number
    address?: string
    username: string
    email: string
    password: string
    subscribers?: UserUncheckedCreateNestedManyWithoutLikedArtistsInput
    albums?: AlbumUncheckedCreateNestedManyWithoutArtistInput
    likedAlbums?: AlbumUncheckedCreateNestedManyWithoutSubscribersInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutCreatorInput
    likedPlaylists?: PlaylistUncheckedCreateNestedManyWithoutSubscribersInput
    monthlyListenings?: MonthlyListeningUncheckedCreateNestedManyWithoutArtistInput
    myLikedMusics?: UserCreatemyLikedMusicsInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutLikedArtistsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikedArtistsInput, UserUncheckedCreateWithoutLikedArtistsInput>
  }

  export type UserCreateWithoutSubscribersInput = {
    address?: string
    username: string
    email: string
    password: string
    likedArtists?: UserCreateNestedManyWithoutSubscribersInput
    albums?: AlbumCreateNestedManyWithoutArtistInput
    likedAlbums?: AlbumCreateNestedManyWithoutSubscribersInput
    playlists?: PlaylistCreateNestedManyWithoutCreatorInput
    likedPlaylists?: PlaylistCreateNestedManyWithoutSubscribersInput
    monthlyListenings?: MonthlyListeningCreateNestedManyWithoutArtistInput
    myLikedMusics?: UserCreatemyLikedMusicsInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutSubscribersInput = {
    id?: number
    address?: string
    username: string
    email: string
    password: string
    likedArtists?: UserUncheckedCreateNestedManyWithoutSubscribersInput
    albums?: AlbumUncheckedCreateNestedManyWithoutArtistInput
    likedAlbums?: AlbumUncheckedCreateNestedManyWithoutSubscribersInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutCreatorInput
    likedPlaylists?: PlaylistUncheckedCreateNestedManyWithoutSubscribersInput
    monthlyListenings?: MonthlyListeningUncheckedCreateNestedManyWithoutArtistInput
    myLikedMusics?: UserCreatemyLikedMusicsInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutSubscribersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubscribersInput, UserUncheckedCreateWithoutSubscribersInput>
  }

  export type AlbumCreateWithoutArtistInput = {
    subscribers?: UserCreateNestedManyWithoutLikedAlbumsInput
    genre: GenreCreateNestedOneWithoutAlbumsInput
    name: string
    type: AlbumType
    coverCID: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumUncheckedCreateWithoutArtistInput = {
    id?: number
    subscribers?: UserUncheckedCreateNestedManyWithoutLikedAlbumsInput
    genreId: number
    name: string
    type: AlbumType
    coverCID: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumCreateOrConnectWithoutArtistInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutArtistInput, AlbumUncheckedCreateWithoutArtistInput>
  }

  export type AlbumCreateManyArtistInputEnvelope = {
    data: Enumerable<AlbumCreateManyArtistInput>
    skipDuplicates?: boolean
  }

  export type AlbumCreateWithoutSubscribersInput = {
    artist: UserCreateNestedOneWithoutAlbumsInput
    genre: GenreCreateNestedOneWithoutAlbumsInput
    name: string
    type: AlbumType
    coverCID: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumUncheckedCreateWithoutSubscribersInput = {
    id?: number
    artistId: number
    genreId: number
    name: string
    type: AlbumType
    coverCID: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumCreateOrConnectWithoutSubscribersInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutSubscribersInput, AlbumUncheckedCreateWithoutSubscribersInput>
  }

  export type PlaylistCreateWithoutCreatorInput = {
    subscribers?: UserCreateNestedManyWithoutLikedPlaylistsInput
    name: string
    likes: number
    musics?: PlaylistCreatemusicsInput | Enumerable<string>
    coverCID: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistUncheckedCreateWithoutCreatorInput = {
    id?: number
    subscribers?: UserUncheckedCreateNestedManyWithoutLikedPlaylistsInput
    name: string
    likes: number
    musics?: PlaylistCreatemusicsInput | Enumerable<string>
    coverCID: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistCreateOrConnectWithoutCreatorInput = {
    where: PlaylistWhereUniqueInput
    create: XOR<PlaylistCreateWithoutCreatorInput, PlaylistUncheckedCreateWithoutCreatorInput>
  }

  export type PlaylistCreateManyCreatorInputEnvelope = {
    data: Enumerable<PlaylistCreateManyCreatorInput>
    skipDuplicates?: boolean
  }

  export type PlaylistCreateWithoutSubscribersInput = {
    creator: UserCreateNestedOneWithoutPlaylistsInput
    name: string
    likes: number
    musics?: PlaylistCreatemusicsInput | Enumerable<string>
    coverCID: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistUncheckedCreateWithoutSubscribersInput = {
    id?: number
    creatorId: number
    name: string
    likes: number
    musics?: PlaylistCreatemusicsInput | Enumerable<string>
    coverCID: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistCreateOrConnectWithoutSubscribersInput = {
    where: PlaylistWhereUniqueInput
    create: XOR<PlaylistCreateWithoutSubscribersInput, PlaylistUncheckedCreateWithoutSubscribersInput>
  }

  export type MonthlyListeningCreateWithoutArtistInput = {
    date?: Date | string
    listenings: number
  }

  export type MonthlyListeningUncheckedCreateWithoutArtistInput = {
    id?: number
    date?: Date | string
    listenings: number
  }

  export type MonthlyListeningCreateOrConnectWithoutArtistInput = {
    where: MonthlyListeningWhereUniqueInput
    create: XOR<MonthlyListeningCreateWithoutArtistInput, MonthlyListeningUncheckedCreateWithoutArtistInput>
  }

  export type MonthlyListeningCreateManyArtistInputEnvelope = {
    data: Enumerable<MonthlyListeningCreateManyArtistInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutLikedArtistsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutLikedArtistsInput, UserUncheckedUpdateWithoutLikedArtistsInput>
    create: XOR<UserCreateWithoutLikedArtistsInput, UserUncheckedCreateWithoutLikedArtistsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutLikedArtistsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutLikedArtistsInput, UserUncheckedUpdateWithoutLikedArtistsInput>
  }

  export type UserUpdateManyWithWhereWithoutLikedArtistsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutSubscribersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    address?: StringFilter | string
    username?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    myLikedMusics?: StringNullableListFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutSubscribersInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutSubscribersInput, UserUncheckedUpdateWithoutSubscribersInput>
    create: XOR<UserCreateWithoutSubscribersInput, UserUncheckedCreateWithoutSubscribersInput>
  }

  export type UserUpdateWithWhereUniqueWithoutSubscribersInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutSubscribersInput, UserUncheckedUpdateWithoutSubscribersInput>
  }

  export type UserUpdateManyWithWhereWithoutSubscribersInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutLikedArtistsInput>
  }

  export type AlbumUpsertWithWhereUniqueWithoutArtistInput = {
    where: AlbumWhereUniqueInput
    update: XOR<AlbumUpdateWithoutArtistInput, AlbumUncheckedUpdateWithoutArtistInput>
    create: XOR<AlbumCreateWithoutArtistInput, AlbumUncheckedCreateWithoutArtistInput>
  }

  export type AlbumUpdateWithWhereUniqueWithoutArtistInput = {
    where: AlbumWhereUniqueInput
    data: XOR<AlbumUpdateWithoutArtistInput, AlbumUncheckedUpdateWithoutArtistInput>
  }

  export type AlbumUpdateManyWithWhereWithoutArtistInput = {
    where: AlbumScalarWhereInput
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyWithoutAlbumsInput>
  }

  export type AlbumScalarWhereInput = {
    AND?: Enumerable<AlbumScalarWhereInput>
    OR?: Enumerable<AlbumScalarWhereInput>
    NOT?: Enumerable<AlbumScalarWhereInput>
    id?: IntFilter | number
    artistId?: IntFilter | number
    genreId?: IntFilter | number
    name?: StringFilter | string
    type?: EnumAlbumTypeFilter | AlbumType
    coverCID?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type AlbumUpsertWithWhereUniqueWithoutSubscribersInput = {
    where: AlbumWhereUniqueInput
    update: XOR<AlbumUpdateWithoutSubscribersInput, AlbumUncheckedUpdateWithoutSubscribersInput>
    create: XOR<AlbumCreateWithoutSubscribersInput, AlbumUncheckedCreateWithoutSubscribersInput>
  }

  export type AlbumUpdateWithWhereUniqueWithoutSubscribersInput = {
    where: AlbumWhereUniqueInput
    data: XOR<AlbumUpdateWithoutSubscribersInput, AlbumUncheckedUpdateWithoutSubscribersInput>
  }

  export type AlbumUpdateManyWithWhereWithoutSubscribersInput = {
    where: AlbumScalarWhereInput
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyWithoutLikedAlbumsInput>
  }

  export type PlaylistUpsertWithWhereUniqueWithoutCreatorInput = {
    where: PlaylistWhereUniqueInput
    update: XOR<PlaylistUpdateWithoutCreatorInput, PlaylistUncheckedUpdateWithoutCreatorInput>
    create: XOR<PlaylistCreateWithoutCreatorInput, PlaylistUncheckedCreateWithoutCreatorInput>
  }

  export type PlaylistUpdateWithWhereUniqueWithoutCreatorInput = {
    where: PlaylistWhereUniqueInput
    data: XOR<PlaylistUpdateWithoutCreatorInput, PlaylistUncheckedUpdateWithoutCreatorInput>
  }

  export type PlaylistUpdateManyWithWhereWithoutCreatorInput = {
    where: PlaylistScalarWhereInput
    data: XOR<PlaylistUpdateManyMutationInput, PlaylistUncheckedUpdateManyWithoutPlaylistsInput>
  }

  export type PlaylistScalarWhereInput = {
    AND?: Enumerable<PlaylistScalarWhereInput>
    OR?: Enumerable<PlaylistScalarWhereInput>
    NOT?: Enumerable<PlaylistScalarWhereInput>
    id?: IntFilter | number
    creatorId?: IntFilter | number
    name?: StringFilter | string
    likes?: IntFilter | number
    musics?: StringNullableListFilter
    coverCID?: StringFilter | string
    description?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type PlaylistUpsertWithWhereUniqueWithoutSubscribersInput = {
    where: PlaylistWhereUniqueInput
    update: XOR<PlaylistUpdateWithoutSubscribersInput, PlaylistUncheckedUpdateWithoutSubscribersInput>
    create: XOR<PlaylistCreateWithoutSubscribersInput, PlaylistUncheckedCreateWithoutSubscribersInput>
  }

  export type PlaylistUpdateWithWhereUniqueWithoutSubscribersInput = {
    where: PlaylistWhereUniqueInput
    data: XOR<PlaylistUpdateWithoutSubscribersInput, PlaylistUncheckedUpdateWithoutSubscribersInput>
  }

  export type PlaylistUpdateManyWithWhereWithoutSubscribersInput = {
    where: PlaylistScalarWhereInput
    data: XOR<PlaylistUpdateManyMutationInput, PlaylistUncheckedUpdateManyWithoutLikedPlaylistsInput>
  }

  export type MonthlyListeningUpsertWithWhereUniqueWithoutArtistInput = {
    where: MonthlyListeningWhereUniqueInput
    update: XOR<MonthlyListeningUpdateWithoutArtistInput, MonthlyListeningUncheckedUpdateWithoutArtistInput>
    create: XOR<MonthlyListeningCreateWithoutArtistInput, MonthlyListeningUncheckedCreateWithoutArtistInput>
  }

  export type MonthlyListeningUpdateWithWhereUniqueWithoutArtistInput = {
    where: MonthlyListeningWhereUniqueInput
    data: XOR<MonthlyListeningUpdateWithoutArtistInput, MonthlyListeningUncheckedUpdateWithoutArtistInput>
  }

  export type MonthlyListeningUpdateManyWithWhereWithoutArtistInput = {
    where: MonthlyListeningScalarWhereInput
    data: XOR<MonthlyListeningUpdateManyMutationInput, MonthlyListeningUncheckedUpdateManyWithoutMonthlyListeningsInput>
  }

  export type MonthlyListeningScalarWhereInput = {
    AND?: Enumerable<MonthlyListeningScalarWhereInput>
    OR?: Enumerable<MonthlyListeningScalarWhereInput>
    NOT?: Enumerable<MonthlyListeningScalarWhereInput>
    id?: IntFilter | number
    artistId?: IntFilter | number
    date?: DateTimeFilter | Date | string
    listenings?: IntFilter | number
  }

  export type UserCreateWithoutAlbumsInput = {
    address?: string
    username: string
    email: string
    password: string
    subscribers?: UserCreateNestedManyWithoutLikedArtistsInput
    likedArtists?: UserCreateNestedManyWithoutSubscribersInput
    likedAlbums?: AlbumCreateNestedManyWithoutSubscribersInput
    playlists?: PlaylistCreateNestedManyWithoutCreatorInput
    likedPlaylists?: PlaylistCreateNestedManyWithoutSubscribersInput
    monthlyListenings?: MonthlyListeningCreateNestedManyWithoutArtistInput
    myLikedMusics?: UserCreatemyLikedMusicsInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutAlbumsInput = {
    id?: number
    address?: string
    username: string
    email: string
    password: string
    subscribers?: UserUncheckedCreateNestedManyWithoutLikedArtistsInput
    likedArtists?: UserUncheckedCreateNestedManyWithoutSubscribersInput
    likedAlbums?: AlbumUncheckedCreateNestedManyWithoutSubscribersInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutCreatorInput
    likedPlaylists?: PlaylistUncheckedCreateNestedManyWithoutSubscribersInput
    monthlyListenings?: MonthlyListeningUncheckedCreateNestedManyWithoutArtistInput
    myLikedMusics?: UserCreatemyLikedMusicsInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutAlbumsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAlbumsInput, UserUncheckedCreateWithoutAlbumsInput>
  }

  export type UserCreateWithoutLikedAlbumsInput = {
    address?: string
    username: string
    email: string
    password: string
    subscribers?: UserCreateNestedManyWithoutLikedArtistsInput
    likedArtists?: UserCreateNestedManyWithoutSubscribersInput
    albums?: AlbumCreateNestedManyWithoutArtistInput
    playlists?: PlaylistCreateNestedManyWithoutCreatorInput
    likedPlaylists?: PlaylistCreateNestedManyWithoutSubscribersInput
    monthlyListenings?: MonthlyListeningCreateNestedManyWithoutArtistInput
    myLikedMusics?: UserCreatemyLikedMusicsInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutLikedAlbumsInput = {
    id?: number
    address?: string
    username: string
    email: string
    password: string
    subscribers?: UserUncheckedCreateNestedManyWithoutLikedArtistsInput
    likedArtists?: UserUncheckedCreateNestedManyWithoutSubscribersInput
    albums?: AlbumUncheckedCreateNestedManyWithoutArtistInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutCreatorInput
    likedPlaylists?: PlaylistUncheckedCreateNestedManyWithoutSubscribersInput
    monthlyListenings?: MonthlyListeningUncheckedCreateNestedManyWithoutArtistInput
    myLikedMusics?: UserCreatemyLikedMusicsInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutLikedAlbumsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikedAlbumsInput, UserUncheckedCreateWithoutLikedAlbumsInput>
  }

  export type GenreCreateWithoutAlbumsInput = {
    name: string
  }

  export type GenreUncheckedCreateWithoutAlbumsInput = {
    id?: number
    name: string
  }

  export type GenreCreateOrConnectWithoutAlbumsInput = {
    where: GenreWhereUniqueInput
    create: XOR<GenreCreateWithoutAlbumsInput, GenreUncheckedCreateWithoutAlbumsInput>
  }

  export type UserUpsertWithoutAlbumsInput = {
    update: XOR<UserUpdateWithoutAlbumsInput, UserUncheckedUpdateWithoutAlbumsInput>
    create: XOR<UserCreateWithoutAlbumsInput, UserUncheckedCreateWithoutAlbumsInput>
  }

  export type UserUpdateWithoutAlbumsInput = {
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    subscribers?: UserUpdateManyWithoutLikedArtistsNestedInput
    likedArtists?: UserUpdateManyWithoutSubscribersNestedInput
    likedAlbums?: AlbumUpdateManyWithoutSubscribersNestedInput
    playlists?: PlaylistUpdateManyWithoutCreatorNestedInput
    likedPlaylists?: PlaylistUpdateManyWithoutSubscribersNestedInput
    monthlyListenings?: MonthlyListeningUpdateManyWithoutArtistNestedInput
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutAlbumsInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    subscribers?: UserUncheckedUpdateManyWithoutLikedArtistsNestedInput
    likedArtists?: UserUncheckedUpdateManyWithoutSubscribersNestedInput
    likedAlbums?: AlbumUncheckedUpdateManyWithoutSubscribersNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutCreatorNestedInput
    likedPlaylists?: PlaylistUncheckedUpdateManyWithoutSubscribersNestedInput
    monthlyListenings?: MonthlyListeningUncheckedUpdateManyWithoutArtistNestedInput
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutLikedAlbumsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutLikedAlbumsInput, UserUncheckedUpdateWithoutLikedAlbumsInput>
    create: XOR<UserCreateWithoutLikedAlbumsInput, UserUncheckedCreateWithoutLikedAlbumsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutLikedAlbumsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutLikedAlbumsInput, UserUncheckedUpdateWithoutLikedAlbumsInput>
  }

  export type UserUpdateManyWithWhereWithoutLikedAlbumsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutSubscribersInput>
  }

  export type GenreUpsertWithoutAlbumsInput = {
    update: XOR<GenreUpdateWithoutAlbumsInput, GenreUncheckedUpdateWithoutAlbumsInput>
    create: XOR<GenreCreateWithoutAlbumsInput, GenreUncheckedCreateWithoutAlbumsInput>
  }

  export type GenreUpdateWithoutAlbumsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type GenreUncheckedUpdateWithoutAlbumsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutPlaylistsInput = {
    address?: string
    username: string
    email: string
    password: string
    subscribers?: UserCreateNestedManyWithoutLikedArtistsInput
    likedArtists?: UserCreateNestedManyWithoutSubscribersInput
    albums?: AlbumCreateNestedManyWithoutArtistInput
    likedAlbums?: AlbumCreateNestedManyWithoutSubscribersInput
    likedPlaylists?: PlaylistCreateNestedManyWithoutSubscribersInput
    monthlyListenings?: MonthlyListeningCreateNestedManyWithoutArtistInput
    myLikedMusics?: UserCreatemyLikedMusicsInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutPlaylistsInput = {
    id?: number
    address?: string
    username: string
    email: string
    password: string
    subscribers?: UserUncheckedCreateNestedManyWithoutLikedArtistsInput
    likedArtists?: UserUncheckedCreateNestedManyWithoutSubscribersInput
    albums?: AlbumUncheckedCreateNestedManyWithoutArtistInput
    likedAlbums?: AlbumUncheckedCreateNestedManyWithoutSubscribersInput
    likedPlaylists?: PlaylistUncheckedCreateNestedManyWithoutSubscribersInput
    monthlyListenings?: MonthlyListeningUncheckedCreateNestedManyWithoutArtistInput
    myLikedMusics?: UserCreatemyLikedMusicsInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutPlaylistsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlaylistsInput, UserUncheckedCreateWithoutPlaylistsInput>
  }

  export type UserCreateWithoutLikedPlaylistsInput = {
    address?: string
    username: string
    email: string
    password: string
    subscribers?: UserCreateNestedManyWithoutLikedArtistsInput
    likedArtists?: UserCreateNestedManyWithoutSubscribersInput
    albums?: AlbumCreateNestedManyWithoutArtistInput
    likedAlbums?: AlbumCreateNestedManyWithoutSubscribersInput
    playlists?: PlaylistCreateNestedManyWithoutCreatorInput
    monthlyListenings?: MonthlyListeningCreateNestedManyWithoutArtistInput
    myLikedMusics?: UserCreatemyLikedMusicsInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutLikedPlaylistsInput = {
    id?: number
    address?: string
    username: string
    email: string
    password: string
    subscribers?: UserUncheckedCreateNestedManyWithoutLikedArtistsInput
    likedArtists?: UserUncheckedCreateNestedManyWithoutSubscribersInput
    albums?: AlbumUncheckedCreateNestedManyWithoutArtistInput
    likedAlbums?: AlbumUncheckedCreateNestedManyWithoutSubscribersInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutCreatorInput
    monthlyListenings?: MonthlyListeningUncheckedCreateNestedManyWithoutArtistInput
    myLikedMusics?: UserCreatemyLikedMusicsInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutLikedPlaylistsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikedPlaylistsInput, UserUncheckedCreateWithoutLikedPlaylistsInput>
  }

  export type UserUpsertWithoutPlaylistsInput = {
    update: XOR<UserUpdateWithoutPlaylistsInput, UserUncheckedUpdateWithoutPlaylistsInput>
    create: XOR<UserCreateWithoutPlaylistsInput, UserUncheckedCreateWithoutPlaylistsInput>
  }

  export type UserUpdateWithoutPlaylistsInput = {
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    subscribers?: UserUpdateManyWithoutLikedArtistsNestedInput
    likedArtists?: UserUpdateManyWithoutSubscribersNestedInput
    albums?: AlbumUpdateManyWithoutArtistNestedInput
    likedAlbums?: AlbumUpdateManyWithoutSubscribersNestedInput
    likedPlaylists?: PlaylistUpdateManyWithoutSubscribersNestedInput
    monthlyListenings?: MonthlyListeningUpdateManyWithoutArtistNestedInput
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutPlaylistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    subscribers?: UserUncheckedUpdateManyWithoutLikedArtistsNestedInput
    likedArtists?: UserUncheckedUpdateManyWithoutSubscribersNestedInput
    albums?: AlbumUncheckedUpdateManyWithoutArtistNestedInput
    likedAlbums?: AlbumUncheckedUpdateManyWithoutSubscribersNestedInput
    likedPlaylists?: PlaylistUncheckedUpdateManyWithoutSubscribersNestedInput
    monthlyListenings?: MonthlyListeningUncheckedUpdateManyWithoutArtistNestedInput
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutLikedPlaylistsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutLikedPlaylistsInput, UserUncheckedUpdateWithoutLikedPlaylistsInput>
    create: XOR<UserCreateWithoutLikedPlaylistsInput, UserUncheckedCreateWithoutLikedPlaylistsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutLikedPlaylistsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutLikedPlaylistsInput, UserUncheckedUpdateWithoutLikedPlaylistsInput>
  }

  export type UserUpdateManyWithWhereWithoutLikedPlaylistsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutSubscribersInput>
  }

  export type AlbumCreateWithoutGenreInput = {
    artist: UserCreateNestedOneWithoutAlbumsInput
    subscribers?: UserCreateNestedManyWithoutLikedAlbumsInput
    name: string
    type: AlbumType
    coverCID: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumUncheckedCreateWithoutGenreInput = {
    id?: number
    subscribers?: UserUncheckedCreateNestedManyWithoutLikedAlbumsInput
    artistId: number
    name: string
    type: AlbumType
    coverCID: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumCreateOrConnectWithoutGenreInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutGenreInput, AlbumUncheckedCreateWithoutGenreInput>
  }

  export type AlbumCreateManyGenreInputEnvelope = {
    data: Enumerable<AlbumCreateManyGenreInput>
    skipDuplicates?: boolean
  }

  export type AlbumUpsertWithWhereUniqueWithoutGenreInput = {
    where: AlbumWhereUniqueInput
    update: XOR<AlbumUpdateWithoutGenreInput, AlbumUncheckedUpdateWithoutGenreInput>
    create: XOR<AlbumCreateWithoutGenreInput, AlbumUncheckedCreateWithoutGenreInput>
  }

  export type AlbumUpdateWithWhereUniqueWithoutGenreInput = {
    where: AlbumWhereUniqueInput
    data: XOR<AlbumUpdateWithoutGenreInput, AlbumUncheckedUpdateWithoutGenreInput>
  }

  export type AlbumUpdateManyWithWhereWithoutGenreInput = {
    where: AlbumScalarWhereInput
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyWithoutAlbumsInput>
  }

  export type UserCreateWithoutMonthlyListeningsInput = {
    address?: string
    username: string
    email: string
    password: string
    subscribers?: UserCreateNestedManyWithoutLikedArtistsInput
    likedArtists?: UserCreateNestedManyWithoutSubscribersInput
    albums?: AlbumCreateNestedManyWithoutArtistInput
    likedAlbums?: AlbumCreateNestedManyWithoutSubscribersInput
    playlists?: PlaylistCreateNestedManyWithoutCreatorInput
    likedPlaylists?: PlaylistCreateNestedManyWithoutSubscribersInput
    myLikedMusics?: UserCreatemyLikedMusicsInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutMonthlyListeningsInput = {
    id?: number
    address?: string
    username: string
    email: string
    password: string
    subscribers?: UserUncheckedCreateNestedManyWithoutLikedArtistsInput
    likedArtists?: UserUncheckedCreateNestedManyWithoutSubscribersInput
    albums?: AlbumUncheckedCreateNestedManyWithoutArtistInput
    likedAlbums?: AlbumUncheckedCreateNestedManyWithoutSubscribersInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutCreatorInput
    likedPlaylists?: PlaylistUncheckedCreateNestedManyWithoutSubscribersInput
    myLikedMusics?: UserCreatemyLikedMusicsInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutMonthlyListeningsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMonthlyListeningsInput, UserUncheckedCreateWithoutMonthlyListeningsInput>
  }

  export type UserUpsertWithoutMonthlyListeningsInput = {
    update: XOR<UserUpdateWithoutMonthlyListeningsInput, UserUncheckedUpdateWithoutMonthlyListeningsInput>
    create: XOR<UserCreateWithoutMonthlyListeningsInput, UserUncheckedCreateWithoutMonthlyListeningsInput>
  }

  export type UserUpdateWithoutMonthlyListeningsInput = {
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    subscribers?: UserUpdateManyWithoutLikedArtistsNestedInput
    likedArtists?: UserUpdateManyWithoutSubscribersNestedInput
    albums?: AlbumUpdateManyWithoutArtistNestedInput
    likedAlbums?: AlbumUpdateManyWithoutSubscribersNestedInput
    playlists?: PlaylistUpdateManyWithoutCreatorNestedInput
    likedPlaylists?: PlaylistUpdateManyWithoutSubscribersNestedInput
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutMonthlyListeningsInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    subscribers?: UserUncheckedUpdateManyWithoutLikedArtistsNestedInput
    likedArtists?: UserUncheckedUpdateManyWithoutSubscribersNestedInput
    albums?: AlbumUncheckedUpdateManyWithoutArtistNestedInput
    likedAlbums?: AlbumUncheckedUpdateManyWithoutSubscribersNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutCreatorNestedInput
    likedPlaylists?: PlaylistUncheckedUpdateManyWithoutSubscribersNestedInput
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumCreateManyArtistInput = {
    id?: number
    genreId: number
    name: string
    type: AlbumType
    coverCID: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistCreateManyCreatorInput = {
    id?: number
    name: string
    likes: number
    musics?: PlaylistCreatemusicsInput | Enumerable<string>
    coverCID: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MonthlyListeningCreateManyArtistInput = {
    id?: number
    date?: Date | string
    listenings: number
  }

  export type UserUpdateWithoutLikedArtistsInput = {
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    subscribers?: UserUpdateManyWithoutLikedArtistsNestedInput
    albums?: AlbumUpdateManyWithoutArtistNestedInput
    likedAlbums?: AlbumUpdateManyWithoutSubscribersNestedInput
    playlists?: PlaylistUpdateManyWithoutCreatorNestedInput
    likedPlaylists?: PlaylistUpdateManyWithoutSubscribersNestedInput
    monthlyListenings?: MonthlyListeningUpdateManyWithoutArtistNestedInput
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutLikedArtistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    subscribers?: UserUncheckedUpdateManyWithoutLikedArtistsNestedInput
    albums?: AlbumUncheckedUpdateManyWithoutArtistNestedInput
    likedAlbums?: AlbumUncheckedUpdateManyWithoutSubscribersNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutCreatorNestedInput
    likedPlaylists?: PlaylistUncheckedUpdateManyWithoutSubscribersNestedInput
    monthlyListenings?: MonthlyListeningUncheckedUpdateManyWithoutArtistNestedInput
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyWithoutSubscribersInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutSubscribersInput = {
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    likedArtists?: UserUpdateManyWithoutSubscribersNestedInput
    albums?: AlbumUpdateManyWithoutArtistNestedInput
    likedAlbums?: AlbumUpdateManyWithoutSubscribersNestedInput
    playlists?: PlaylistUpdateManyWithoutCreatorNestedInput
    likedPlaylists?: PlaylistUpdateManyWithoutSubscribersNestedInput
    monthlyListenings?: MonthlyListeningUpdateManyWithoutArtistNestedInput
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutSubscribersInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    likedArtists?: UserUncheckedUpdateManyWithoutSubscribersNestedInput
    albums?: AlbumUncheckedUpdateManyWithoutArtistNestedInput
    likedAlbums?: AlbumUncheckedUpdateManyWithoutSubscribersNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutCreatorNestedInput
    likedPlaylists?: PlaylistUncheckedUpdateManyWithoutSubscribersNestedInput
    monthlyListenings?: MonthlyListeningUncheckedUpdateManyWithoutArtistNestedInput
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyWithoutLikedArtistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumUpdateWithoutArtistInput = {
    subscribers?: UserUpdateManyWithoutLikedAlbumsNestedInput
    genre?: GenreUpdateOneRequiredWithoutAlbumsNestedInput
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAlbumTypeFieldUpdateOperationsInput | AlbumType
    coverCID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumUncheckedUpdateWithoutArtistInput = {
    id?: IntFieldUpdateOperationsInput | number
    subscribers?: UserUncheckedUpdateManyWithoutLikedAlbumsNestedInput
    genreId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAlbumTypeFieldUpdateOperationsInput | AlbumType
    coverCID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumUncheckedUpdateManyWithoutAlbumsInput = {
    id?: IntFieldUpdateOperationsInput | number
    genreId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAlbumTypeFieldUpdateOperationsInput | AlbumType
    coverCID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumUpdateWithoutSubscribersInput = {
    artist?: UserUpdateOneRequiredWithoutAlbumsNestedInput
    genre?: GenreUpdateOneRequiredWithoutAlbumsNestedInput
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAlbumTypeFieldUpdateOperationsInput | AlbumType
    coverCID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumUncheckedUpdateWithoutSubscribersInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    genreId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAlbumTypeFieldUpdateOperationsInput | AlbumType
    coverCID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumUncheckedUpdateManyWithoutLikedAlbumsInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    genreId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAlbumTypeFieldUpdateOperationsInput | AlbumType
    coverCID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistUpdateWithoutCreatorInput = {
    subscribers?: UserUpdateManyWithoutLikedPlaylistsNestedInput
    name?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    musics?: PlaylistUpdatemusicsInput | Enumerable<string>
    coverCID?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    subscribers?: UserUncheckedUpdateManyWithoutLikedPlaylistsNestedInput
    name?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    musics?: PlaylistUpdatemusicsInput | Enumerable<string>
    coverCID?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistUncheckedUpdateManyWithoutPlaylistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    musics?: PlaylistUpdatemusicsInput | Enumerable<string>
    coverCID?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistUpdateWithoutSubscribersInput = {
    creator?: UserUpdateOneRequiredWithoutPlaylistsNestedInput
    name?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    musics?: PlaylistUpdatemusicsInput | Enumerable<string>
    coverCID?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistUncheckedUpdateWithoutSubscribersInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    musics?: PlaylistUpdatemusicsInput | Enumerable<string>
    coverCID?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistUncheckedUpdateManyWithoutLikedPlaylistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    musics?: PlaylistUpdatemusicsInput | Enumerable<string>
    coverCID?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MonthlyListeningUpdateWithoutArtistInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    listenings?: IntFieldUpdateOperationsInput | number
  }

  export type MonthlyListeningUncheckedUpdateWithoutArtistInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    listenings?: IntFieldUpdateOperationsInput | number
  }

  export type MonthlyListeningUncheckedUpdateManyWithoutMonthlyListeningsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    listenings?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpdateWithoutLikedAlbumsInput = {
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    subscribers?: UserUpdateManyWithoutLikedArtistsNestedInput
    likedArtists?: UserUpdateManyWithoutSubscribersNestedInput
    albums?: AlbumUpdateManyWithoutArtistNestedInput
    playlists?: PlaylistUpdateManyWithoutCreatorNestedInput
    likedPlaylists?: PlaylistUpdateManyWithoutSubscribersNestedInput
    monthlyListenings?: MonthlyListeningUpdateManyWithoutArtistNestedInput
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutLikedAlbumsInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    subscribers?: UserUncheckedUpdateManyWithoutLikedArtistsNestedInput
    likedArtists?: UserUncheckedUpdateManyWithoutSubscribersNestedInput
    albums?: AlbumUncheckedUpdateManyWithoutArtistNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutCreatorNestedInput
    likedPlaylists?: PlaylistUncheckedUpdateManyWithoutSubscribersNestedInput
    monthlyListenings?: MonthlyListeningUncheckedUpdateManyWithoutArtistNestedInput
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutLikedPlaylistsInput = {
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    subscribers?: UserUpdateManyWithoutLikedArtistsNestedInput
    likedArtists?: UserUpdateManyWithoutSubscribersNestedInput
    albums?: AlbumUpdateManyWithoutArtistNestedInput
    likedAlbums?: AlbumUpdateManyWithoutSubscribersNestedInput
    playlists?: PlaylistUpdateManyWithoutCreatorNestedInput
    monthlyListenings?: MonthlyListeningUpdateManyWithoutArtistNestedInput
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutLikedPlaylistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    subscribers?: UserUncheckedUpdateManyWithoutLikedArtistsNestedInput
    likedArtists?: UserUncheckedUpdateManyWithoutSubscribersNestedInput
    albums?: AlbumUncheckedUpdateManyWithoutArtistNestedInput
    likedAlbums?: AlbumUncheckedUpdateManyWithoutSubscribersNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutCreatorNestedInput
    monthlyListenings?: MonthlyListeningUncheckedUpdateManyWithoutArtistNestedInput
    myLikedMusics?: UserUpdatemyLikedMusicsInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumCreateManyGenreInput = {
    id?: number
    artistId: number
    name: string
    type: AlbumType
    coverCID: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumUpdateWithoutGenreInput = {
    artist?: UserUpdateOneRequiredWithoutAlbumsNestedInput
    subscribers?: UserUpdateManyWithoutLikedAlbumsNestedInput
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAlbumTypeFieldUpdateOperationsInput | AlbumType
    coverCID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumUncheckedUpdateWithoutGenreInput = {
    id?: IntFieldUpdateOperationsInput | number
    subscribers?: UserUncheckedUpdateManyWithoutLikedAlbumsNestedInput
    artistId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAlbumTypeFieldUpdateOperationsInput | AlbumType
    coverCID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}