name: TAB - Dwaves-app  

on:
  push:
    branches: 
      - feature/*
      - bugfix/*
      - hotfix/*
    paths:
      - frontend/dwaves-app/**
  pull_request:
    # types: [opened, synchronize, reopened]
    # branches:
    #   - staging
    #   - main
    paths:
      - frontend/dwaves-app/**


env:
  APP: dwaves-app
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
  DISCORD_TEAM_ID: ${{ secrets.DISCORD_FRONT_TEAM_ID }} 
  SONAR_PROJECT_BASE_DIR: frontend/dwaves-app/
  SONAR_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_DWAVES_APP }}
  SONAR_PROJECT_KEY: ${{ secrets.DWAVES_APP_PROJECT_KEY }}
  NODE_VERSION: 16.x
  GCP_SA_KEY: ${{ secrets.TF_SA }}
  GCP_PROJECT_ID: ${{ secrets.DWAVES_PROJECT_ID }}
  DWAVES_STAGING_URL: ${{ secrets.STAGING_ADDRESS }}
  DWAVES_PRODUCTION_URL: ${{ secrets.PROD_ADDRESS }}

defaults:
  run:
    working-directory: "frontend/dwaves-app"

jobs:
  integration-tests:
    name: Integretion Tests
    # if: |
    #   github.ref == 'refs/heads/feature/*' ||
    #   github.ref == 'refs/heads/bugfix/*' ||
    #   github.ref == 'refs/heads/hotfix/*' ||
    #   github.ref == 'refs/pull/4/*' ||
    #   github.ref == 'refs/heads/staging' ||
    #   github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     node-version: [16.x]
    steps:
      - name: Checkout üòá
        uses: actions/checkout@v3

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
            node-version: ${{ env.NODE_VERSION }}

      - name: Environment variables üß™
        run: |-
          sed -i 's/localhost:3000/${{ secrets.STAGING_ADDRESS }}/g' src/Pages/Player.tsx

      - name: Integartion Tests üèó
        run: |-
          echo "Running  integration tests..."

      - name: Discord notification on failure
        if: failure()
        uses: ./.github/actions/notification-on-failure


  unit-test:
    name: Unit Test
    # if: |
    #   github.ref == 'refs/heads/feature/*' ||
    #   github.ref == 'refs/heads/bugfix/*' ||
    #   github.ref == 'refs/heads/hotfix/*' ||
    #   github.ref == 'refs/heads/staging' ||
    #   github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     node-version: [16.x]
    steps:

      - name: Checkout üòá
        uses: actions/checkout@v3

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
            node-version: ${{ env.NODE_VERSION }}

      - name: Environment variables üß™
        run: |-
          sed -i 's/localhost:3000/${{ secrets.STAGING_ADDRESS }}/g' src/Pages/Player.tsx

      - name: Unit Test üß™
        run: |-
          echo "Running  unit tests..."

      - name: Discord notification on failure
        if: failure()
        uses: ./.github/actions/notification-on-failure

  code-analysis:
    name: Code Analysis
    # if: |
    #   github.ref == 'refs/heads/feature/*' ||
    #   github.ref == 'refs/heads/bugfix/*' ||
    #   github.ref == 'refs/heads/hotfix/*' ||
    #   github.ref == 'refs/heads/staging' ||
    #   github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions: 
      contents: read
      pull-requests: write
    needs: [integration-tests, unit-test]
    steps:
      - name: Checkout üòá
        uses: actions/checkout@v3

      - name: SonarCloud Scan
        uses: ./.github/actions/sonarcloud

      - name: Discord notification on failure
        if: failure()
        uses: ./.github/actions/notification-on-failure

  build:
    name: Build
    # if: |
    #   contains('
    #     refs/heads/feature/*
    #     refs/heads/bugfix/*
    #     refs/heads/hotfix/*
    #     refs/heads/staging
    #     refs/heads/main
    #   ', github.ref)
    runs-on: ubuntu-latest
    needs: [code-analysis]
    # strategy:
    #   matrix:
    #     node-version: [16.x]
    steps:
      - name: Checkout üòá
        uses: actions/checkout@v3

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build üèó
        run: |-
          npm install
          CI='false' npm run build

      - name: Caching Build folder
        id: cache-build
        uses: actions/cache@v3
        with:
          path: build/
          key: ${{ runner.os }}-build
          restore-keys: |
            ${{ runner.os }}-build
            ${{ runner.os }}-

      - name: Discord notification on success
        if: success()
        uses: ./.github/actions/notification-on-success

      - name: Discord notification on failure
        if: failure()
        uses: ./.github/actions/notification-on-failure
        # uses: Wbebey/dwaves/.github/actions/notification-on-failure@feature/pipeline

  deploy:
    name: Deploy to GCP 
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'  || github.ref == 'refs/heads/main'
    needs: [build]
    environment: 
      name: |
        if [ ${{ github.ref }} == 'refs/heads/staging' ]; then
          return dwaves-app-staging
        elif [ ${{ github.ref }} == 'refs/heads/main' ]; then
          return dwaves-app-production
        fi
      url: |
        if [ ${{ github.ref }} == 'refs/heads/staging' ]; then
          return ${{ env.DWAVES_STAGING_URL }}
        elif [ ${{ github.ref }} == 'refs/heads/main' ]; then
          return ${{ env.DWAVES_PRODUCTION_URL }}
        fi
    steps:
      - name: Checkout üòá
        uses: actions/checkout@v3

      - name: Deploy üöÄ
        uses: ./.github/actions/front-deployment

      # - name: GCP authentification ü§ë
      #   uses: google-github-actions/setup-gcloud@v0
      #   with:
      #     service_account_key: ${{ env.GCP_SA_KEY }}
      #     project_id: ${{ env.GCP_PROJECT_ID }}

      # - name: Retreive Cached Build folder
      #   id: cache-build
      #   uses: actions/cache@v3
      #   with:
      #     path: build/
      #     key: ${{ runner.os }}-build

      # - name: Deploy üöÄ
      #   run: |-
      #     if [ ${{ github.ref }} == 'refs/heads/main' ]; then 
      #       export environment=${{ env.APP }}-production
      #       export deploy_url=${{ env.DWAVES_PRODUCTION_URL }}
      #       gsutil rsync -R build/ gs://$deploy_url
      #     elif [ ${{ github.ref }} == 'refs/heads/staging' ]; then
      #       export environment=${{ env.APP }}-staging
      #       export deploy_url=${{ env.DWAVES_STAGING_URL }}
      #       gsutil rsync -R build/ gs://$deploy_url
      #     fi
      #     echo "Deployed to $environment environment: $url"