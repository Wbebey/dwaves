name: Test & Analyse - Dwaves-api

on:
  push:
    paths:
      - backend/api/**
  # pull_request:
  #   types: [opened, synchronize, reopened]
  #   branches:
  #     - staging
  #     - main
  #   paths:
  #     - backend/api/**

env:
    APP: dwaves-api
    # ENVIRONMENT: staging
    NODE_VERSION: 16.x
    BACKEND_DIRECTORY: backend
    PROJECT_DIRECTORY: backend/api
    DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
    DISCORD_TEAM_ID: ${{ secrets.DISCORD_BACK_TEAM_ID }} 
    SONAR_PROJECT_BASE_DIR: backend/api/
    SONAR_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_DWAVES_API }}
    SONAR_PROJECT_KEY: ${{ secrets.DWAVES_API_PROJECT_KEY }}
    # ENV_VARS: ${{ secrets.DWAVES_API_STAGING_ENV }}
    GCP_SA_KEY: ${{ secrets.TF_SA }}
    GCP_PROJECT_ID: ${{ secrets.DWAVES_PROJECT_ID }}
    DWAVES_API_PRODUCTION_ENV: ${{ secrets.DWAVES_API_PRODUCTION_ENV }}
    DWAVES_API_STAGING_ENV: ${{ secrets.DWAVES_API_STAGING_ENV }}
    PROPERTIES_SCRIPT: ${{ GITHUB.WORKSPACE }}/.github/workflows/environment.sh
    # DOCKER_TAG: gcr.io/${{ secrets.DWAVES_PROJECT_ID }}/${{ env.APP }}-${{ env.ENVIRONMENT }}:${{ github.sha }}

defaults:
  run:
    working-directory: "backend/api"

jobs:
  integration-test:
    name: Integretion Test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/bugfix/') || startsWith(github.ref, 'refs/heads/hotfix/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üòá
        uses: actions/checkout@v3

      - name: Integration Tests üèó
        uses: ./.github/actions/frontend/integration-test

      - name: Discord notification on failure
        if: failure()
        uses: ./.github/actions/discord/notification-on-failure

  unit-test:
    name: Unit Test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/bugfix/') || startsWith(github.ref, 'refs/heads/hotfix/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üòá
        uses: actions/checkout@v3

      - name: Unit Test üß™
        uses: ./.github/actions/frontend/unit-test

      - name: Discord notification on failure
        if: failure()
        uses: ./.github/actions/discord/notification-on-failure

  code-analysis:
    name: Code Analysis
    # if: github.ref in 
    #   [
    #     'refs/heads/main',
    #     'refs/heads/staging', 
    #     'refs/heads/feature/', 
    #     'refs/heads/bugfix/', 
    #     'refs/heads/hotfix/'
    #   ]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/bugfix/') || startsWith(github.ref, 'refs/heads/hotfix/')
    runs-on: ubuntu-latest
    needs: [integration-test, unit-test]
    permissions: 
      contents: read
      pull-requests: write
    steps:
      - name: Checkout üòá
        uses: actions/checkout@v3

      - name: SonarCloud Scan
        uses: ./.github/actions/sonarcloud

      - name: Discord notification on failure
        if: failure()
        uses: ./.github/actions/discord/notification-on-failure

  deploy:
    name: Deployment
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || startsWith(github.ref, 'refs/heads/feature/') 
    needs: [code-analysis]
    # env:
    #   DOCKER_TAG: gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.APP }}-${{ env.ENVIRONMENT }}:${{ github.sha }}
    environment: dwaves-api
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üòá
        uses: actions/checkout@v3

      - name: Discord notification Deployment started
        uses: ./.github/actions/discord/notification-on-start-deployment

      # - name: Set environment variables
      #   run: |
      #     echo "::set-env name=ENV::${{ if eq(github.ref, 'refs/heads/main') }}production${else}staging${endif}}"

      # - name: Set environments
      #   run: |
      #     if [[ ${{ github.ref }} == refs/heads/feature/* ]]
      #     then
      #       export ENVIRONMENT="production"
      #       export ENV_VARS="${{ secrets.DWAVES_API_PRODUCTION_ENV }}"
      #       export DOCKER_TAG="gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.APP }}-$ENVIRONMENT:${{ github.ref }}-${{ github.sha }}"
      #     else
      #       export ENVIRONMENT="staging"
      #       export ENV_VARS="${{ secrets.DWAVES_API_STAGING_ENV }}"
      #       export DOCKER_TAG="gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.APP }}-$ENVIRONMENT:${{ github.ref }}-${{ github.sha }}"
      #     fi

      # - name: echo variables 
      #   run: |
      #     echo $ENVIRONMENT
      #     echo $ENV_VARS
      #     echo $DOCKER_TAG

      - name: GCP authentification ü§ë
        uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ env.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      #TODO: remove this step when we find a new way to manage env file is ready
      # - name: Retrieve environment for ${{ env.ENVIRONMENT }} üåé
      #   run: |-
      #     export APP_ENV = env_${{ env.APP }}_${{ env.ENVIRONMENT }}
      #     cat $APP_ENV
      #     echo "$APP_ENV" > .env

      - name: Check variables
        env:
          APP: ${{ env.APP }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_SHA: ${{ github.sha }}
          GCP_PROJECT_ID: ${{ env.GCP_PROJECT_ID }}
          DWAVES_API_PRODUCTION_ENV: ${{ env.DWAVES_API_PRODUCTION_ENV }}
          DWAVES_API_STAGING_ENV: ${{ env.DWAVES_API_STAGING_ENV }}
        run: |-
          source ${{ env.PROPERTIES_SCRIPT }} && get_environment_properties
          echo $ENVIRONMENT
          echo $ENV_VARS
          echo $DOCKER_TAG

      - name: Retrieve environment variables üåé
        env:
          DWAVES_API_PRODUCTION_ENV: ${{ env.DWAVES_API_PRODUCTION_ENV }}
          DWAVES_API_STAGING_ENV: ${{ env.DWAVES_API_STAGING_ENV }}
        run: |-
          source ${{ env.PROPERTIES_SCRIPT }} && get_environment_properties
          echo "$ENV_VARS" > .env

      - name: Build üèó
        env:
          APP: ${{ env.APP }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_SHA: ${{ github.sha }}
          GCP_PROJECT_ID: ${{ env.GCP_PROJECT_ID }}
        run: |-
          source ${{ env.PROPERTIES_SCRIPT }} && get_environment_properties
          docker build . \
            -f ${{ GITHUB.WORKSPACE }}/${{ env.PROJECT_DIRECTORY }}/Dockerfile \
            -t $DOCKER_TAG \
            --build-arg ENVIRONMENT=$ENVIRONMENT \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg BUILD_NUMBER=${{ github.run_number }} \
            --build-arg BUILD_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      # - name: Publish to Container registry üõ´
      #   run: |-
      #     echo "Pushing image $DOCKER_TAG to google cloud container registry..."
      #     gcloud auth configure-docker --quiet
      #     docker push $DOCKER_TAG

      # - name: Deploy to cloud run üöÄ
      #   run: |-
      #     gcloud run deploy ${{ env.APP }}-$ENVIRONMENT \
      #       --image $DOCKER_TAG \
      #       --platform managed \
      #       --region europe-west1 \
      #       --allow-unauthenticated \
      #       --cpu 1000m \
      #       --memory 512Mi \
      #       --timeout 300 \
      #       --project ${{ env.GCP_PROJECT_ID }}

      - name: Discord notification on success
        if: success()
        uses: ./.github/actions/discord/notification-on-success

      - name: Discord notification on failure
        if: failure()
        uses: ./.github/actions/discord/notification-on-failure