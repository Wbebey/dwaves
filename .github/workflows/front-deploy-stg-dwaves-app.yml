name : Deploy Dwaves-app to staging

on:
    push:
        branches:
            - staging
            - feature/*
        paths:
            - frontend/dwaves-app/**

env: 
    APP: dwaves-app
    ENVIRONMENT: staging
    PROJECT_DIRECTORY: frontend/dwaves-app
    DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
    DISCORD_TEAM_ID: ${{ secrets.DISCORD_FRONT_TEAM_ID }} 
    SONAR_PROJECT_BASE_DIR: frontend/dwaves-app/
    SONAR_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_DWAVES_APP }}
    SONAR_PROJECT_KEY: ${{ secrets.DWAVES_APP_PROJECT_KEY }}
    NODE_VERSION: 16.x
    GCP_SA_KEY: ${{ secrets.TF_SA }}
    GCP_PROJECT_ID: ${{ secrets.DWAVES_PROJECT_ID }}
    DWAVES_STAGING_URL: ${{ secrets.STAGING_ADDRESS }}

defaults:
    run:
        working-directory: "frontend/dwaves-app"

jobs:
    integration-tests:
        name: Integretion Test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout üòá
              uses: actions/checkout@v3

            - name: Integration Tests üèó
              uses: ./.github/actions/frontend/integration-test

            - name: Discord notification on failure
              if: failure()
              uses: ./.github/actions/notification-on-failure


    unit-test:
        name: Unit Test
        runs-on: ubuntu-latest
        steps:

            - name: Checkout üòá
              uses: actions/checkout@v3

            - name: Use Node.js ${{ env.NODE_VERSION }}
              uses: actions/setup-node@v3
              with:
                node-version: ${{ env.NODE_VERSION }}

            - name: Unit Test üß™
              run: |-
                echo "Running  unit tests..."

            - name: Discord notification on failure
              if: failure()
              uses: ./.github/actions/notification-on-failure

    code-analysis:
        name: Code Analysis
        runs-on: ubuntu-latest
        permissions: 
            contents: read
            pull-requests: write
        needs: [integration-tests, unit-test]
        steps:
            - name: Checkout üòá
              uses: actions/checkout@v3

            - name: SonarCloud Scan
              uses: ./.github/actions/sonarcloud

            - name: Discord notification on failure
              if: failure()
              uses: ./.github/actions/notification-on-failure

    deploy:
        name: Deploy to staging
        needs: [code-analysis]
        environment:
            name: "${{ env.APP }}-${{ env.ENVIRONMENT }}"
            url: ${{ env.DWAVES_STAGING_URL }}
        runs-on: ubuntu-latest
        steps:
            - name: Checkout üòá
              uses: actions/checkout@v3

            - name: Discord notification ${{ env.ENVIRONMENT }} Deployment started
              uses: ./.github/actions/notification-on-start-deployment

            - name: GCP authentification ü§ë
              uses: google-github-actions/setup-gcloud@v0
              with:
                service_account_key: ${{ env.GCP_SA_KEY }}
                project_id: ${{ env.GCP_PROJECT_ID }}

            - name: Use Node.js ${{ env.NODE_VERSION }}
              uses: actions/setup-node@v3
              with:
                node-version: ${{ env.NODE_VERSION }}

            - name: NPM install
              run: npm install

            - name: Build üèó
              run: |-
                CI='false' npm run build

            - name: Deploy Staging üöÄ
              if: ${{ github.ref }} == 'refs/heads/staging'
              run: |-
                export environment="${{ env.APP }}-${{ env.ENVIRONMENT }}"
                export deploy_url=${{ env.DWAVES_STAGING_URL }}
                gsutil rsync -R build/ gs://$deploy_url
                echo "Deployed to $environment environment: $deploy_url"

            - name: Discord notification on success
              if: success()
              uses: ./.github/actions/notification-on-success

            - name: Discord notification on failure
              if: failure()
              uses: ./.github/actions/notification-on-failure